{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2020-08-20-flex-formp.md","hash":"e66f18a95b0dffa6b74c6d00b7a59e70ef7751b8","modified":1598706682007},{"_id":"source/_posts/2020-08-28-JS-Array.md","hash":"4358cc078b604320f537fcfd36529574bfb48b9f","modified":1598706845160},{"_id":"source/_posts/2020-08-22-mp-cmp.md","hash":"d183f8e5d4a82f0710ae15b2a8129e238b04dace","modified":1598706679932},{"_id":"source/_posts/2020-8-19-KOA-base.md","hash":"4da9b33160c929d20d6f4e3289b312c5307f33f4","modified":1598706685115},{"_id":"source/_posts/2020-8-27-JS-scope.md","hash":"bccbbbc28f4bc57dcca5d8833dfd6c982ac677ac","modified":1598706677227},{"_id":"source/about/index.md","hash":"5ce1d8c7d2ee83815ae508e14fb299f94f88a8b8","modified":1598614493797},{"_id":"source/categories/index.md","hash":"896535082a123e9f635fa1a1c0b56ebf561e0fd2","modified":1598616375981},{"_id":"source/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1598742983090},{"_id":"source/tags/index.md","hash":"00ab972c6703b43a9cb544a8b6b30ef68d4d25e2","modified":1598614940486},{"_id":"source/lib/canvas-nest/README.md","hash":"6964aecdc62466e6b529f6887558669925a36bc6","modified":1598742983090},{"_id":"source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"6b4437a9cd8aa04329cc6220a595acfe1fb9b598","modified":1598742983091},{"_id":"source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1598742983091},{"_id":"source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1598742983028},{"_id":"source/lib/canvas-nest/.git/config","hash":"78c4459d066ad795856608d603d780b53488073d","modified":1598742983044},{"_id":"source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1598742980229},{"_id":"source/lib/canvas-nest/.git/index","hash":"d80b5fa7bb95673bb3d404e77a3b85c8c9127baa","modified":1598742983093},{"_id":"source/lib/canvas-nest/.git/packed-refs","hash":"80eecf0c5c7f21b2678dc1c329f74de19b6a3a67","modified":1598742983017},{"_id":"source/lib/canvas-nest/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1598742983090},{"_id":"source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1598742980232},{"_id":"source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1598742980235},{"_id":"source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1598742980236},{"_id":"source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1598742980234},{"_id":"source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1598742980237},{"_id":"source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1598742980238},{"_id":"source/lib/canvas-nest/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1598742980239},{"_id":"source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1598742980239},{"_id":"source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1598742980240},{"_id":"source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1598742980242},{"_id":"source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1598742980241},{"_id":"source/lib/canvas-nest/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1598742980242},{"_id":"source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1598742980244},{"_id":"source/lib/canvas-nest/.git/logs/HEAD","hash":"6c3b22ab64f116627bb376dcac88dc2d70d712ca","modified":1598742983037},{"_id":"source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1598742982819},{"_id":"source/lib/canvas-nest/.git/objects/17/9eb5d6cd5f44ba3dd9e08b4ffcd83bb26db80a","hash":"03d593c92c9fad045d298f58afdbbcfbde923999","modified":1598742982811},{"_id":"source/lib/canvas-nest/.git/objects/22/504fa21ce1b75e3f898ffafc8d2a8bed8d00c9","hash":"7c6ee7a38812c72e52ecb5c2ad725a9f103923a6","modified":1598742982927},{"_id":"source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1598742982905},{"_id":"source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1598742982823},{"_id":"source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1598742982850},{"_id":"source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1598742982917},{"_id":"source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1598742982772},{"_id":"source/lib/canvas-nest/.git/objects/4b/2975337cf280e5555ca7a82dc7c2d4b437c5b0","hash":"d36f2c2b52c48d7f7cd0d0beb42be2ecd7534287","modified":1598742982923},{"_id":"source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1598742982777},{"_id":"source/lib/canvas-nest/.git/objects/50/306daa49b7b24c4759a4e832bfba3531c53f49","hash":"32aa9d96315007f8d79cd162bc77398addfa6ddf","modified":1598742982940},{"_id":"source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1598742982871},{"_id":"source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1598742982835},{"_id":"source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1598742982843},{"_id":"source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1598742982785},{"_id":"source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1598742982828},{"_id":"source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1598742982910},{"_id":"source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1598742982790},{"_id":"source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1598742982899},{"_id":"source/lib/canvas-nest/.git/objects/8b/66994be5014f18d17347ff32232c91d51ad08c","hash":"a22da1680018e1ab95118216eb88115d2947930a","modified":1598742982957},{"_id":"source/lib/canvas-nest/.git/objects/8c/150fefb741be4edee07810003c8a845113e209","hash":"067de29d5efa0a46cdc8f9f113820e5e09bfa50a","modified":1598742982969},{"_id":"source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1598742982806},{"_id":"source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1598742982893},{"_id":"source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1598742982865},{"_id":"source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1598742982794},{"_id":"source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1598742982801},{"_id":"source/lib/canvas-nest/.git/objects/ab/45cbef9bc70ceff60f1ed52f2a5c34f6ad5725","hash":"ee2fa8f3df0de9092a4fce015cefd76ea18f4cfd","modified":1598742982961},{"_id":"source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1598742982885},{"_id":"source/lib/canvas-nest/.git/objects/b3/5fc481f71dd08037f6b9febb5ec02c790f843b","hash":"ed5aa3a748675544aaa141c182a317453dd1e774","modified":1598742982945},{"_id":"source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1598742982855},{"_id":"source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1598742982858},{"_id":"source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1598742982876},{"_id":"source/lib/canvas-nest/.git/objects/d1/b8c85241243a80f16d56e7a50244d3695f6e6e","hash":"baf56a83286c72af11667786dc59e7c58d30e427","modified":1598742982935},{"_id":"source/lib/canvas-nest/.git/objects/e1/5c0793114874195462829db04d021face6640e","hash":"ff6c6d9f05b171ba67b44564ae3574d16eae6222","modified":1598742982767},{"_id":"source/lib/canvas-nest/.git/objects/d6/5de52977302632417c21e015956fb3dab8cabd","hash":"e0c8f0483b20434e63748a649ca4afbb417997f4","modified":1598742982840},{"_id":"source/lib/canvas-nest/.git/objects/fd/3e2cc9301ef9c1978ace2bd0aee99f47176661","hash":"09b27ad6cf69d4dcb926389e16913daccb5d2972","modified":1598742982952},{"_id":"source/lib/canvas-nest/.git/refs/heads/master","hash":"473e30291eac5f6d120dfe823b29ad4b2218f05a","modified":1598742983036},{"_id":"source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"6c3b22ab64f116627bb376dcac88dc2d70d712ca","modified":1598742983039},{"_id":"source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1598742983026},{"_id":"source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"6c3b22ab64f116627bb376dcac88dc2d70d712ca","modified":1598742983026},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1598704521047},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1598704521049},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1598704521097},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1598704521054},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1598704521100},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1598704521103},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1598704521105},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1598704521108},{"_id":"themes/next/_config.yml","hash":"8e50639cd63a4afe5fc59655eb4b4f9615db29f7","modified":1598745651112},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1598704521114},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1598704521183},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1598704521444},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1598704521120},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1598704521123},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1598704521126},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1598704521131},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1598704521128},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1598704521133},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1598704521136},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1598704521140},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1598704521142},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1598704521187},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1598704521190},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1598704521192},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1598704521195},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1598704521197},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1598704521200},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1598704521204},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1598704521206},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1598704521208},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1598704521211},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1598704521214},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1598704521217},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1598704521219},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1598704521221},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1598704521224},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1598704521226},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1598704521229},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1598704521231},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1598704521234},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1598704521237},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1598704521242},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1598704521240},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1598704521246},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1598704521431},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1598704521434},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1598704521438},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1598704521440},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1598704521436},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1598704521442},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1598704521500},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1598704521149},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1598704521151},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1598704521147},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1598704521154},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1598704521159},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1598704521161},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1598704521167},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1598704521164},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1598704521170},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1598704521175},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1598704521172},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1598704521178},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1598704521180},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1598704521250},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1598704521253},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1598704521256},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1598704521367},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1598704521391},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1598704521401},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1598704521403},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1598704521327},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1598704521330},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1598704521336},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1598704521349},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1598704521353},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1598704521260},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4a4c71d6501f3fae38b25f312c6fa4c2eccde7b4","modified":1598704521262},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1598704521285},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1598704521294},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1598704521324},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1598704521448},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1598704521478},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1598704521480},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1598704521482},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1598704521485},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1598704521487},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1598704521491},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1598704521493},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1598704521495},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1598704521498},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1598704521503},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1598704521506},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1598704521508},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1598704521510},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1598704521512},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1598704521514},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1598704521516},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1598704521523},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1598704521521},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1598704521518},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1598704521528},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1598704521692},{"_id":"themes/next/source/css/main.styl","hash":"94877bd17c61e2cf7f6db7a4e2e379fc0948e8cd","modified":1598742913944},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1598704521758},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598704521761},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1598704521764},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1598704521773},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1598704521776},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1598704521771},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1598704521768},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1598704521778},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1598704521781},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1598704521783},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598704521786},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598704521789},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1598704521791},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1598704521812},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1598704521794},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1598704521799},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1598704521796},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1598704521802},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1598704521809},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1598704521358},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1598704521803},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1598704521360},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1598704521363},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1598704521364},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1598704521371},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1598704521373},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1598704521379},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1598704521381},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1598704521377},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1598704521384},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1598704521389},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1598704521386},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1598704521395},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1598704521397},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1598704521399},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1598704521406},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1598704521408},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1598704521411},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1598704521415},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1598704521417},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1598704521419},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1598704521421},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1598704521423},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1598704521426},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1598704521430},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1598704521333},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1598704521340},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1598704521343},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1598704521345},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1598704521347},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1598704521266},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1598704521269},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1598704521273},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1598704521278},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1598704521275},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1598704521280},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1598704521283},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1598704521289},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1598704521291},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1598704521297},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1598704521300},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1598704521303},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1598704521306},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1598704521309},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1598704521322},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1598704521315},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1598704521312},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1598704521317},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1598704521452},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1598704521454},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1598704521456},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1598704521460},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1598704521462},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1598704521465},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1598704521467},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1598704521469},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1598704521471},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1598704521474},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1598704521476},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1598704521741},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1598704521743},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1598704521745},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1598704521748},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1598704521751},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1598704521828},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1598704521829},{"_id":"themes/next/source/lib/three/.gitignore","hash":"5767276045f60da2350895a59aa6e138b0e83294","modified":1598743151994},{"_id":"themes/next/source/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1598743151994},{"_id":"themes/next/source/lib/three/README.md","hash":"76071f107e07113ccb23192680782577a15c5350","modified":1598743151995},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"558838e0821f76c1e6d58add25116853caa1976c","modified":1598743151996},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"1b371d908c6729f15877601792583e25cc4e6091","modified":1598743151997},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"8667c49d81292b55e4ec8c0ec9f8eb42f4ababab","modified":1598743151997},{"_id":"themes/next/source/lib/three/package.json","hash":"ff493a283c04f87a272abdffa8aa29fb4368b803","modified":1598743152000},{"_id":"themes/next/source/lib/three/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1598743152001},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"62fe85b767c525a07bbec1193c0840ee924dad9a","modified":1598743152004},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1598704521807},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1598704521806},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1598704521533},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1598704521536},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1598704521540},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1598704521584},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1598704521619},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"84404bb4897a5ffd0c6ad327dbacf0a0d9f3d1b1","modified":1598708020276},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1598704521647},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1598704521650},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1598704521653},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1598704521666},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1598704521668},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1598704521670},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1598704521672},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1598704521690},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"ec6141c5fd8fdbf78103ff00bcb970e497f7415f","modified":1598742907789},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1598704521700},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1598704521703},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1598704521705},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1598704521707},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1598704521709},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1598704521712},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1598704521715},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1598704521722},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1598704521717},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1598704521720},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1598704521724},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1598704521727},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1598704521729},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1598704521731},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1598704521733},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1598704521738},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1598704521735},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1598704521819},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1598704521823},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1598743151959},{"_id":"themes/next/source/lib/three/.git/config","hash":"c9c13087a3f33e6f46cd35a93c8b9bdf27618852","modified":1598743151968},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1598743148345},{"_id":"themes/next/source/lib/three/.git/index","hash":"802fee61056fdbcd20bda1e0dd5d924ca519584e","modified":1598743152010},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"51439496ae6791f8b002584e71f5d10f4f1a1f71","modified":1598743151950},{"_id":"themes/next/source/lib/three/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1598743151993},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"69725cd0af6868c5aa059343cc6e18e0c10b2f2e","modified":1598743151999},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"71141daa39bbcedcf14ae95c05023a57828a5a43","modified":1598743151998},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"10795d7f1e5393b2b5e1529b017ee4e0ffe82ac9","modified":1598743152002},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"8381c792b161001a1b5cf39613c6d48e2588b3ce","modified":1598743152002},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"ac382962d408f16acf07b925b94bb15495b5207c","modified":1598743152003},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1598704521543},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1598704521545},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1598704521547},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1598704521549},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1598704521552},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1598704521556},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1598704521558},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1598704521560},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1598704521562},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1598704521564},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1598704521566},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1598704521569},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1598704521572},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1598704521573},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1598704521576},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1598704521578},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1598704521580},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1598704521582},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1598704521588},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1598704521590},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1598704521592},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1598704521594},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1598704521596},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1598704521601},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1598704521606},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"974d8dbeb496156bb3c4253abba49050b56f27fa","modified":1598708032782},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1598704521604},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1598704521611},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1598704521613},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1598704521615},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1598704521617},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1598704521625},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1598704521627},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1598704521629},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1598704521631},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1598704521633},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1598704521635},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1598704521637},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1598704521640},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1598708028097},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1598704521644},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1598704521658},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1598704521656},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1598704521661},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1598704521663},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1598704521675},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1598704521677},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1598704521679},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1598704521682},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1598704521684},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1598704521686},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1598704521688},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1598743148346},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1598743148347},{"_id":"themes/next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1598743148355},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1598743148355},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1598743148356},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1598743148356},{"_id":"themes/next/source/lib/three/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1598743148357},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1598743148357},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1598743148358},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1598743148358},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1598743148359},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1598743148359},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1598743148360},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"15ee195446fa838d0b8e932bfe734585585cdc88","modified":1598743151963},{"_id":"themes/next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1598743150923},{"_id":"themes/next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1598743150970},{"_id":"themes/next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1598743151893},{"_id":"themes/next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1598743151025},{"_id":"themes/next/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1598743150792},{"_id":"themes/next/source/lib/three/.git/objects/0e/f76c758387d59ca0221cd50564e9edf7080c99","hash":"874d6d28ce21ce2873016183dd9e22b91f71c750","modified":1598743150935},{"_id":"themes/next/source/lib/three/.git/objects/15/e42465bbd9589d2112d7fe3328bd7f85c6b24f","hash":"c28f5e24b9b15ecfddd666711c6d6ef57317cb29","modified":1598743150731},{"_id":"themes/next/source/lib/three/.git/objects/19/65ef0ba0e2c1ad938cffdcbebed63048751ac6","hash":"75921c60b65a5606a85ab5cec185f430d844048d","modified":1598743151040},{"_id":"themes/next/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1598743150740},{"_id":"themes/next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1598743150769},{"_id":"themes/next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1598743151834},{"_id":"themes/next/source/lib/three/.git/objects/1f/354734edae8d1fa1af07d20573698512589c4e","hash":"9f1bb3baf74e25329b553704be0a3c64e194df8c","modified":1598743150701},{"_id":"themes/next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1598743151906},{"_id":"themes/next/source/lib/three/.git/objects/21/cbdd0d76bb18019bcb47aeec029fb13e211b09","hash":"c4466a47cecee06641b74dca59ed92665c24a5d7","modified":1598743151795},{"_id":"themes/next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1598743151880},{"_id":"themes/next/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1598743150796},{"_id":"themes/next/source/lib/three/.git/objects/34/cbb2a80da03e4d233dcfa3f11fed64894b2de5","hash":"ddf0c1fdb72ed14c50b1d1718a122f5f2a38a3ed","modified":1598743151007},{"_id":"themes/next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1598743150961},{"_id":"themes/next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1598743150800},{"_id":"themes/next/source/lib/three/.git/objects/3a/ae52073909b7ccdbd43538ee6c814691935c57","hash":"652619b1d76f267c1646b6167de80f58a520525e","modified":1598743151035},{"_id":"themes/next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1598743151028},{"_id":"themes/next/source/lib/three/.git/objects/3e/4151e56ef50d7ff46a1ce73156c35ac6f1224d","hash":"a47d2e1895903aa7e1b51d35731f212ffc6a1718","modified":1598743150723},{"_id":"themes/next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1598743151863},{"_id":"themes/next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1598743151816},{"_id":"themes/next/source/lib/three/.git/objects/42/d67e32b0d5f676f7462ad5b013f4eb8cad2486","hash":"fb1c4d377401f2145cc721d96fdf40d89ac23434","modified":1598743150957},{"_id":"themes/next/source/lib/three/.git/objects/4f/f48fd861ac49dd98ce52052bf6214f0a91facf","hash":"ae4d7b9a38e8913c055d37a6f129378d089bfd65","modified":1598743150916},{"_id":"themes/next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1598743151853},{"_id":"themes/next/source/lib/three/.git/objects/53/c865f8ff0aaa7ae2c8da7324dce73756ffe7c0","hash":"2d1c2dcfa342f46910a5698023b2c208bf3336e0","modified":1598743150929},{"_id":"themes/next/source/lib/three/.git/objects/64/d845d3aed3dce9eab9de39793f1c4d1d6e0deb","hash":"1c7346386e8c3d8830bf36bff7011976ba326b3e","modified":1598743150939},{"_id":"themes/next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1598743151849},{"_id":"themes/next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1598743150804},{"_id":"themes/next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1598743150966},{"_id":"themes/next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1598743150744},{"_id":"themes/next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1598743151838},{"_id":"themes/next/source/lib/three/.git/objects/6f/f9f6347d48d4bc18b07a813f9140d7287df7aa","hash":"46232e003a90f98c78af21c4898ab37c66fda385","modified":1598743151790},{"_id":"themes/next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1598743150894},{"_id":"themes/next/source/lib/three/.git/objects/7b/a927a3390f9a6345039cdb5bc54c6a54297f69","hash":"0d10f821d9e61a27c3f9d9e03e923265693d68ab","modified":1598743151785},{"_id":"themes/next/source/lib/three/.git/objects/7d/2bcbb026e4a38ab45317d8b78bfed70ba25c51","hash":"05394b260c2c58ee38b7224bb4ecb52df1e7f354","modified":1598743151810},{"_id":"themes/next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1598743151031},{"_id":"themes/next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1598743150775},{"_id":"themes/next/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1598743151828},{"_id":"themes/next/source/lib/three/.git/objects/81/d7d11db23df8681d1a8242fb27252a9d2d7062","hash":"a294b374bb129cc8aaec9c01bf1df1c5addafe9d","modified":1598743150719},{"_id":"themes/next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1598743151844},{"_id":"themes/next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1598743150757},{"_id":"themes/next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1598743151888},{"_id":"themes/next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1598743151871},{"_id":"themes/next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1598743150951},{"_id":"themes/next/source/lib/three/.git/objects/8e/985e4c70f87248ecc33d93410d80d1632c552f","hash":"a1d2084dd43e026f1b93027221629f5cbb135c88","modified":1598743150783},{"_id":"themes/next/source/lib/three/.git/objects/90/e94cbdbfd33fea8606d447d01011ff657478f1","hash":"df922aee3bc7eb3266134797efb6f888743c6a12","modified":1598743150945},{"_id":"themes/next/source/lib/three/.git/objects/94/1060002b98395a31cb47a33166f5568a20d4b5","hash":"c345981cd6097743cbb6f44d61b33ed37b110b31","modified":1598743150714},{"_id":"themes/next/source/lib/three/.git/objects/9d/b082c6081a7d8b8b752bc35ebcba85073f5fac","hash":"c240b76ccdb8552d6d4c75e55d5c4c93807756af","modified":1598743150708},{"_id":"themes/next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1598743151826},{"_id":"themes/next/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1598743150735},{"_id":"themes/next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1598743150749},{"_id":"themes/next/source/lib/three/.git/objects/bc/e19792442b36a0560e50adf61e86ef7ecbb50a","hash":"10f1b5f7fc7fd8b01ea9c5a5d1efad0464dd03ca","modified":1598743150788},{"_id":"themes/next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1598743150948},{"_id":"themes/next/source/lib/three/.git/objects/c3/e49d5369de034ff0788d11519bd9150b67ce74","hash":"256a3f0a7054a3e2cde1fc58f027565c87ad3d1b","modified":1598743150906},{"_id":"themes/next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1598743150761},{"_id":"themes/next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1598743151897},{"_id":"themes/next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1598743151875},{"_id":"themes/next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1598743151800},{"_id":"themes/next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1598743151867},{"_id":"themes/next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1598743151020},{"_id":"themes/next/source/lib/three/.git/objects/db/fc5bb53f0ee561f55b18c9796e1e03a9781153","hash":"3cda0d28ce918db5b722db817e69ea522a4db9ce","modified":1598743150727},{"_id":"themes/next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1598743151884},{"_id":"themes/next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1598743150779},{"_id":"themes/next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1598743151858},{"_id":"themes/next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1598743151902},{"_id":"themes/next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1598743151002},{"_id":"themes/next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1598743150752},{"_id":"themes/next/source/lib/three/.git/objects/ef/45fc381ccdb38fd03bb02c4e761d08275049c2","hash":"2eb89702aa19a302e38aff842b6ad1e22c3fbb93","modified":1598743151012},{"_id":"themes/next/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1598743151015},{"_id":"themes/next/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1598743151805},{"_id":"themes/next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1598743151820},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"dcb9d54aa64c8a682ca5ca209370022b8a8dc843","modified":1598743151962},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"15ee195446fa838d0b8e932bfe734585585cdc88","modified":1598743151964},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1598743151956},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"15ee195446fa838d0b8e932bfe734585585cdc88","modified":1598743151956},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1598704521822},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1598704521825},{"_id":"themes/next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1598743151576},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1598743152008},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1598745785980},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1598745785980},{"_id":"public/sitemap.xml","hash":"ce4cdbac974779b14dcfc59c348ea6dbdfc2e39f","modified":1598745785980},{"_id":"public/about/index.html","hash":"d724d9b68e2b920d1c7f5e5bbd3d1c498e0f07ed","modified":1598745785980},{"_id":"public/categories/index.html","hash":"4867fff46a86d58bb262c2ecc5f81863f26986d8","modified":1598745785980},{"_id":"public/tags/index.html","hash":"da65b91692f961d340e399b3a753eb12c1e623e9","modified":1598745785980},{"_id":"public/archives/index.html","hash":"498ff7e1aaedb5330e9f7736631e84fe3b142f8d","modified":1598745785980},{"_id":"public/archives/2020/index.html","hash":"47d7453e22ab4fc7b3c6516c56447f18ec4b8889","modified":1598745785980},{"_id":"public/archives/2020/08/index.html","hash":"65ba93850d9942c2fa13e9208d609c313a04cdb8","modified":1598745785980},{"_id":"public/categories/web前端/index.html","hash":"9cfbf8b0892606136317a6ddb0f222455e696f5f","modified":1598745785980},{"_id":"public/tags/小程序/index.html","hash":"db9fdb3840ce4f21931d80f99c16f74d62f0db4e","modified":1598745785980},{"_id":"public/tags/ES6/index.html","hash":"63293b66083b7d4ca0da6e48a9805df42fd18d44","modified":1598745785980},{"_id":"public/tags/NodeJS/index.html","hash":"932db905c20f5f90029603b61a1e780e206d76d3","modified":1598745785980},{"_id":"public/lib/canvas-nest/README.html","hash":"ac88e15a743888bf07722fbd1d897476e7cd0279","modified":1598745785980},{"_id":"public/2020/08/28/2020-08-28-JS-Array/index.html","hash":"ed7d36c3153c5766eaa7125c90a49414a49ee9ba","modified":1598745785980},{"_id":"public/2020/08/22/2020-08-22-mp-cmp/index.html","hash":"553f99a24d1514bc730ae4f8e6f729f62b9f8e59","modified":1598745785980},{"_id":"public/2020/08/22/2020-8-27-JS-scope/index.html","hash":"a7222350aaa87daba636d37e5763084a8a83ad66","modified":1598745785980},{"_id":"public/2020/08/20/2020-08-20-flex-formp/index.html","hash":"fcfcd5578e7fc062cbb7cdbe81114b2b9f351e56","modified":1598745785980},{"_id":"public/2020/08/19/2020-8-19-KOA-base/index.html","hash":"5ab17318e51f35bee46bcd48545811b54c8a1b36","modified":1598745785980},{"_id":"public/index.html","hash":"af56387896d4027af1d4e83cce304ae0698bf0b8","modified":1598745785980},{"_id":"public/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1598745785980},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1598745785980},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598745785980},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1598745785980},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1598745785980},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1598745785980},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1598745785980},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1598745785980},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1598745785980},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1598745785980},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598745785980},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598745785980},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1598745785980},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1598745785980},{"_id":"public/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1598745785980},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1598745785980},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1598745785980},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1598745785980},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1598745785980},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1598745785980},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1598745785980},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1598745785980},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1598745785980},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1598745785980},{"_id":"public/lib/three/README.html","hash":"2eb166c7b8400151729974fd196478bd4579ff03","modified":1598745785980},{"_id":"public/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1598745785980},{"_id":"public/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1598745785980},{"_id":"public/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1598745785980},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1598745785980},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1598745785980},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1598745785980},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1598745785980},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1598745785980},{"_id":"public/css/main.css","hash":"cbb46337bc798ed2fbbcab5289278b136a0d18bc","modified":1598745785980},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1598745785980},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1598745785980},{"_id":"public/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1598745785980},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1598745785980},{"_id":"public/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1598745785980},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1598745785980},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1598745785980},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1598745785980},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1598745785980},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1598745785980}],"Category":[{"name":"web前端","_id":"ckegby71b0004qovfa6e888j6"}],"Data":[],"Page":[{"_content":"# Theme NexT Canvas Nest\n\n![Theme Version](https://img.shields.io/badge/NexT-v7.3.0+-blue?style=flat-square)\n\n[canvas-nest.js](https://github.com/hustcc/canvas-nest.js) for [NexT](https://github.com/theme-next).\n\n## Install\n\n### Step 1 &rarr; Go to Hexo dir\n\nChange dir to **Hexo** directory. There must be `scaffolds`, `source`, `themes` and other directories:\n\n```sh\n$ cd hexo\n$ ls\nscaffolds  source  themes  _config.yml  package.json\n```\n\n### Step 2 &rarr; Create `footer.swig`\n\nCreate a file named `footer.swig` in `hexo/source/_data` directory (create `_data` directory if it does not exist).\n\nEdit this file and add the following content:\n\n```xml\n<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>\n```\n\nYou can customize these options.\n\n### Step 3 &rarr; Set it up\n\nIn the NexT `_config.yml`, uncomment `footer` under the `custom_file_path` section.\n\n```yml\n# Define custom file paths.\n# Create your custom files in site directory `source/_data` and uncomment needed files below.\ncustom_file_path:\n  #head: source/_data/head.swig\n  #header: source/_data/header.swig\n  #sidebar: source/_data/sidebar.swig\n  #postMeta: source/_data/post-meta.swig\n  #postBodyEnd: source/_data/post-body-end.swig\n  footer: source/_data/footer.swig\n  #bodyEnd: source/_data/body-end.swig\n  #variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  #style: source/_data/styles.styl\n```\n","source":"lib/canvas-nest/README.md","raw":"# Theme NexT Canvas Nest\n\n![Theme Version](https://img.shields.io/badge/NexT-v7.3.0+-blue?style=flat-square)\n\n[canvas-nest.js](https://github.com/hustcc/canvas-nest.js) for [NexT](https://github.com/theme-next).\n\n## Install\n\n### Step 1 &rarr; Go to Hexo dir\n\nChange dir to **Hexo** directory. There must be `scaffolds`, `source`, `themes` and other directories:\n\n```sh\n$ cd hexo\n$ ls\nscaffolds  source  themes  _config.yml  package.json\n```\n\n### Step 2 &rarr; Create `footer.swig`\n\nCreate a file named `footer.swig` in `hexo/source/_data` directory (create `_data` directory if it does not exist).\n\nEdit this file and add the following content:\n\n```xml\n<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>\n```\n\nYou can customize these options.\n\n### Step 3 &rarr; Set it up\n\nIn the NexT `_config.yml`, uncomment `footer` under the `custom_file_path` section.\n\n```yml\n# Define custom file paths.\n# Create your custom files in site directory `source/_data` and uncomment needed files below.\ncustom_file_path:\n  #head: source/_data/head.swig\n  #header: source/_data/header.swig\n  #sidebar: source/_data/sidebar.swig\n  #postMeta: source/_data/post-meta.swig\n  #postBodyEnd: source/_data/post-body-end.swig\n  footer: source/_data/footer.swig\n  #bodyEnd: source/_data/body-end.swig\n  #variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  #style: source/_data/styles.styl\n```\n","date":"2020-08-29T23:16:23.090Z","updated":"2020-08-29T23:16:23.090Z","path":"lib/canvas-nest/README.html","title":"","comments":1,"layout":"page","_id":"ckegby70z0000qovf8o1bc3j8","content":"<h1 id=\"Theme-NexT-Canvas-Nest\"><a href=\"#Theme-NexT-Canvas-Nest\" class=\"headerlink\" title=\"Theme NexT Canvas Nest\"></a>Theme NexT Canvas Nest</h1><p><img src=\"https://img.shields.io/badge/NexT-v7.3.0+-blue?style=flat-square\" alt=\"Theme Version\"></p>\n<p><a href=\"https://github.com/hustcc/canvas-nest.js\">canvas-nest.js</a> for <a href=\"https://github.com/theme-next\">NexT</a>.</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><h3 id=\"Step-1-rarr-Go-to-Hexo-dir\"><a href=\"#Step-1-rarr-Go-to-Hexo-dir\" class=\"headerlink\" title=\"Step 1 &rarr; Go to Hexo dir\"></a>Step 1 &rarr; Go to Hexo dir</h3><p>Change dir to <strong>Hexo</strong> directory. There must be <code>scaffolds</code>, <code>source</code>, <code>themes</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">scaffolds  <span class=\"built_in\">source</span>  themes  _config.yml  package.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-2-rarr-Create-footer-swig\"><a href=\"#Step-2-rarr-Create-footer-swig\" class=\"headerlink\" title=\"Step 2 &rarr; Create footer.swig\"></a>Step 2 &rarr; Create <code>footer.swig</code></h3><p>Create a file named <code>footer.swig</code> in <code>hexo/source/_data</code> directory (create <code>_data</code> directory if it does not exist).</p>\n<p>Edit this file and add the following content:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;0,0,255&quot;</span> <span class=\"attr\">opacity</span>=<span class=\"string\">&quot;0.5&quot;</span> <span class=\"attr\">zIndex</span>=<span class=\"string\">&quot;-1&quot;</span> <span class=\"attr\">count</span>=<span class=\"string\">&quot;99&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You can customize these options.</p>\n<h3 id=\"Step-3-rarr-Set-it-up\"><a href=\"#Step-3-rarr-Set-it-up\" class=\"headerlink\" title=\"Step 3 &rarr; Set it up\"></a>Step 3 &rarr; Set it up</h3><p>In the NexT <code>_config.yml</code>, uncomment <code>footer</code> under the <code>custom_file_path</code> section.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Define custom file paths.</span></span><br><span class=\"line\"><span class=\"comment\"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#bodyEnd: source/_data/body-end.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#variable: source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1157,"excerpt":"","more":"<h1 id=\"Theme-NexT-Canvas-Nest\"><a href=\"#Theme-NexT-Canvas-Nest\" class=\"headerlink\" title=\"Theme NexT Canvas Nest\"></a>Theme NexT Canvas Nest</h1><p><img src=\"https://img.shields.io/badge/NexT-v7.3.0+-blue?style=flat-square\" alt=\"Theme Version\"></p>\n<p><a href=\"https://github.com/hustcc/canvas-nest.js\">canvas-nest.js</a> for <a href=\"https://github.com/theme-next\">NexT</a>.</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><h3 id=\"Step-1-rarr-Go-to-Hexo-dir\"><a href=\"#Step-1-rarr-Go-to-Hexo-dir\" class=\"headerlink\" title=\"Step 1 &rarr; Go to Hexo dir\"></a>Step 1 &rarr; Go to Hexo dir</h3><p>Change dir to <strong>Hexo</strong> directory. There must be <code>scaffolds</code>, <code>source</code>, <code>themes</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">scaffolds  <span class=\"built_in\">source</span>  themes  _config.yml  package.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-2-rarr-Create-footer-swig\"><a href=\"#Step-2-rarr-Create-footer-swig\" class=\"headerlink\" title=\"Step 2 &rarr; Create footer.swig\"></a>Step 2 &rarr; Create <code>footer.swig</code></h3><p>Create a file named <code>footer.swig</code> in <code>hexo/source/_data</code> directory (create <code>_data</code> directory if it does not exist).</p>\n<p>Edit this file and add the following content:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;0,0,255&quot;</span> <span class=\"attr\">opacity</span>=<span class=\"string\">&quot;0.5&quot;</span> <span class=\"attr\">zIndex</span>=<span class=\"string\">&quot;-1&quot;</span> <span class=\"attr\">count</span>=<span class=\"string\">&quot;99&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You can customize these options.</p>\n<h3 id=\"Step-3-rarr-Set-it-up\"><a href=\"#Step-3-rarr-Set-it-up\" class=\"headerlink\" title=\"Step 3 &rarr; Set it up\"></a>Step 3 &rarr; Set it up</h3><p>In the NexT <code>_config.yml</code>, uncomment <code>footer</code> under the <code>custom_file_path</code> section.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Define custom file paths.</span></span><br><span class=\"line\"><span class=\"comment\"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#bodyEnd: source/_data/body-end.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#variable: source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n"},{"title":"about","date":"2020-08-28T11:30:14.000Z","type":"about","_content":"#### 关于我\n本名刘流，一名大三学生。\n写博客记录自己的日常，记录学习\n\n#### 我的网站\n[个人网站](http://www.stayfoolish.vip/)\n\n#### 联系我\nliuliu310@outlook.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-08-28 19:30:14\ntype: \"about\"\n---\n#### 关于我\n本名刘流，一名大三学生。\n写博客记录自己的日常，记录学习\n\n#### 我的网站\n[个人网站](http://www.stayfoolish.vip/)\n\n#### 联系我\nliuliu310@outlook.com","updated":"2020-08-28T11:34:53.797Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckegby7170002qovf0um28jnx","content":"<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h4><p>本名刘流，一名大三学生。<br>写博客记录自己的日常，记录学习</p>\n<h4 id=\"我的网站\"><a href=\"#我的网站\" class=\"headerlink\" title=\"我的网站\"></a>我的网站</h4><p><a href=\"http://www.stayfoolish.vip/\">个人网站</a></p>\n<h4 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h4><p><a href=\"mailto:&#108;&#105;&#117;&#x6c;&#x69;&#117;&#51;&#49;&#48;&#64;&#x6f;&#117;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;\">&#108;&#105;&#117;&#x6c;&#x69;&#117;&#51;&#49;&#48;&#64;&#x6f;&#117;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;</a></p>\n","site":{"data":{}},"length":163,"excerpt":"","more":"<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h4><p>本名刘流，一名大三学生。<br>写博客记录自己的日常，记录学习</p>\n<h4 id=\"我的网站\"><a href=\"#我的网站\" class=\"headerlink\" title=\"我的网站\"></a>我的网站</h4><p><a href=\"http://www.stayfoolish.vip/\">个人网站</a></p>\n<h4 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h4><p><a href=\"mailto:&#108;&#105;&#117;&#x6c;&#x69;&#117;&#51;&#49;&#48;&#64;&#x6f;&#117;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;\">&#108;&#105;&#117;&#x6c;&#x69;&#117;&#51;&#49;&#48;&#64;&#x6f;&#117;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;</a></p>\n"},{"title":"categories","date":"2020-08-28T11:43:30.000Z","type":"categories","categories":null,"tags":null,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-08-28 19:43:30\ntype: \"categories\"\ncategories:\ntags:\n---\n","updated":"2020-08-28T12:06:15.981Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckegby71e0006qovf24ac3p0b","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2020-08-28T11:19:59.000Z","type":"tags","categories":null,"tags":null,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-08-28 19:19:59\ntype: \"tags\"\ncategories:\ntags:\n---\n","updated":"2020-08-28T11:42:20.486Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckegby71h0008qovf52zv8zj1","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"_content":"!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();","source":"lib/canvas-nest/canvas-nest.min.js","raw":"!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();","date":"2020-08-29T23:16:23.091Z","updated":"2020-08-29T23:16:23.091Z","path":"lib/canvas-nest/canvas-nest.min.js","layout":"false","title":"","comments":1,"_id":"ckegby71k000aqovfhdlpbptb","content":"!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();","site":{"data":{}},"length":583,"excerpt":"","more":"!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();"},{"_content":"!function(){\n\tvar userAgentInfo = navigator.userAgent;\n    var Agents = [\"iPad\", \"iPhone\", \"Android\", \n          \"SymbianOS\", \"Windows Phone\",\n           \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"];\n    for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n        return;\n      }\n    }\n\tfunction o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();","source":"lib/canvas-nest/canvas-nest-nomobile.min.js","raw":"!function(){\n\tvar userAgentInfo = navigator.userAgent;\n    var Agents = [\"iPad\", \"iPhone\", \"Android\", \n          \"SymbianOS\", \"Windows Phone\",\n           \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"];\n    for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n        return;\n      }\n    }\n\tfunction o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();","date":"2020-08-29T23:16:23.091Z","updated":"2020-08-29T23:16:23.091Z","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","layout":"false","title":"","comments":1,"_id":"ckegby71s000fqovf7grae4jf","content":"!function(){\n\tvar userAgentInfo = navigator.userAgent;\n    var Agents = [\"iPad\", \"iPhone\", \"Android\", \n          \"SymbianOS\", \"Windows Phone\",\n           \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"];\n    for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n        return;\n      }\n    }\n\tfunction o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();","site":{"data":{}},"length":804,"excerpt":"","more":"!function(){\n\tvar userAgentInfo = navigator.userAgent;\n    var Agents = [\"iPad\", \"iPhone\", \"Android\", \n          \"SymbianOS\", \"Windows Phone\",\n           \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"];\n    for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n        return;\n      }\n    }\n\tfunction o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();"}],"Post":[{"title":"在小程序中使用flex布局","date":"2020-08-19T16:00:00.000Z","_content":"\n\n#### 1. 何为布局\n\n布局就是用代码按照设计图的样式实现。布局是非常重要的技能，网页开发人员应该精通布局.\n<!-- more -->\n在小程序中 view 标签相当于 html 里面的 div 都是一个块级元素。\n\n行内元素（inline）是不能设置宽和高的。但是（inline-block）元素可以。\n\n#### 2. flex 布局\n\nflex （flexible） 弹性盒子。\n\n##### 2.1 flex 消除了 item 的块状特性\n\n使用 flex 可以实现三个元素在一行。当一个容器里面有很多的子元素时，给这个父容器添加 flex 属性，其子元素的块级元素的特征就会消失。子元素就会默认排列在一行中。\n\n##### 2.2 flex-direction 的应用\n\n当给容器设置了 flex 属性的时候，它的子元素的 block 属性就会失去作用，就算给子元素设置block 属性也是起不了作用的。\n\n ```css\n.container{\n    display: flex;\n    flex-direction: column;\n}\n ```\n\n给父元素添加 `flex-direction: column;` 属性，其子元素就会采用纵向排列.`flex-direction` 的默认值是 `row`\n\n##### 2.3 reverse 倒序排布\n\n```css\n.container{\n    display: flex;\n    flex-direction: column-reverse;\n}\n```\n\n`flex-direction` 的四个常用取值：\n\n1. `row`\n2. `column`\n3. `row-reverse`\n4. `column-reverse`\n\n\n使用 flex 之后，容器的高度是自适应的，其会根据容器的内部元素的高度而改变。\n\n总结：对于 view 这个组件，它的宽度默认是 100% ，高度通常是自适应的。对于 reverse 倒序，不仅仅元素排列的顺序会发生改变，其对齐的方向也会改变。\n\n##### 2.4 justify-content属性\n\n对齐方向: `justify-content`\n常用属性：\n\n```css\n.container{\n    display: flex;\n    flex-direction: row;\n    /*开始的位置对齐*/\n    justify-content: flex-end;\n    /*结束的位置对齐*/\n    justify-content: flex-start;\n    /*居中对齐*/\n    justify-content: center;\n    /*平均分布：两侧对齐，中间平均分布*/\n    justify-content: space-between;\n    /*等距分布：对于每个子元素，他们两侧的距离均相等*/\n    justify-content: space-around;\n}\n```\n\n##### 2.5 主轴与交叉轴\n\nflex 里面有两个轴：主轴和交叉轴。\n\n实现元素水平方向和垂直方向上面都居中：\n\n```css\n.container{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n主轴和交叉轴是可以自定义的：通过 `flex-direction` 属性进行定义。`justify-content` 属性设置在主轴上面的排列方式 `align-items` 属性设置在交叉轴的排列方式。\n\n##### 2.6 baseline 与 stretch\n\n`align-items: stretch;` 在没有设置item 的高度的时候，将 `align-items:` 的属性值设置为 stretch 的时候，item 会充满父元素。\n\n`align-items: baseline;`baseline 的意思是，让 items 元素按照第一个元素里面的文字对齐。\n\n##### 2.7 flex-wrap 与消除间距\n\n`flex-wrap` 属性是设置换行。\n当我们给设置了 flex 属性的容器的子元素设置了宽度之后，就算子元素的总宽度超过的容器的宽度，flex 也不会让他们自动换行。\n假如我们需要那些子元素换行的话，就需要用到 `flex-wrap` 属性.\n`flex-wrap` 常用属性值：\n\n```css\n    /* 换行，*/\n    flex-wrap: wrap;\n    /*不换行，默认状态下的取值*/\n    flex-wrap: nowrap;\n    /*颠倒换行*/\n    flex-wrap: wrap-reverse;\n```\n\n当容器的高度过多时，被换行的元素的上下间距会平分。如果不需要平分间距的话，将容器的高度设置一下即可.\n\n\n\n","source":"_posts/2020-08-20-flex-formp.md","raw":"---\ntitle: 在小程序中使用flex布局\ntags: 小程序\ndate: 2020-08-20 \ncategories: \n- web前端\n---\n\n\n#### 1. 何为布局\n\n布局就是用代码按照设计图的样式实现。布局是非常重要的技能，网页开发人员应该精通布局.\n<!-- more -->\n在小程序中 view 标签相当于 html 里面的 div 都是一个块级元素。\n\n行内元素（inline）是不能设置宽和高的。但是（inline-block）元素可以。\n\n#### 2. flex 布局\n\nflex （flexible） 弹性盒子。\n\n##### 2.1 flex 消除了 item 的块状特性\n\n使用 flex 可以实现三个元素在一行。当一个容器里面有很多的子元素时，给这个父容器添加 flex 属性，其子元素的块级元素的特征就会消失。子元素就会默认排列在一行中。\n\n##### 2.2 flex-direction 的应用\n\n当给容器设置了 flex 属性的时候，它的子元素的 block 属性就会失去作用，就算给子元素设置block 属性也是起不了作用的。\n\n ```css\n.container{\n    display: flex;\n    flex-direction: column;\n}\n ```\n\n给父元素添加 `flex-direction: column;` 属性，其子元素就会采用纵向排列.`flex-direction` 的默认值是 `row`\n\n##### 2.3 reverse 倒序排布\n\n```css\n.container{\n    display: flex;\n    flex-direction: column-reverse;\n}\n```\n\n`flex-direction` 的四个常用取值：\n\n1. `row`\n2. `column`\n3. `row-reverse`\n4. `column-reverse`\n\n\n使用 flex 之后，容器的高度是自适应的，其会根据容器的内部元素的高度而改变。\n\n总结：对于 view 这个组件，它的宽度默认是 100% ，高度通常是自适应的。对于 reverse 倒序，不仅仅元素排列的顺序会发生改变，其对齐的方向也会改变。\n\n##### 2.4 justify-content属性\n\n对齐方向: `justify-content`\n常用属性：\n\n```css\n.container{\n    display: flex;\n    flex-direction: row;\n    /*开始的位置对齐*/\n    justify-content: flex-end;\n    /*结束的位置对齐*/\n    justify-content: flex-start;\n    /*居中对齐*/\n    justify-content: center;\n    /*平均分布：两侧对齐，中间平均分布*/\n    justify-content: space-between;\n    /*等距分布：对于每个子元素，他们两侧的距离均相等*/\n    justify-content: space-around;\n}\n```\n\n##### 2.5 主轴与交叉轴\n\nflex 里面有两个轴：主轴和交叉轴。\n\n实现元素水平方向和垂直方向上面都居中：\n\n```css\n.container{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n主轴和交叉轴是可以自定义的：通过 `flex-direction` 属性进行定义。`justify-content` 属性设置在主轴上面的排列方式 `align-items` 属性设置在交叉轴的排列方式。\n\n##### 2.6 baseline 与 stretch\n\n`align-items: stretch;` 在没有设置item 的高度的时候，将 `align-items:` 的属性值设置为 stretch 的时候，item 会充满父元素。\n\n`align-items: baseline;`baseline 的意思是，让 items 元素按照第一个元素里面的文字对齐。\n\n##### 2.7 flex-wrap 与消除间距\n\n`flex-wrap` 属性是设置换行。\n当我们给设置了 flex 属性的容器的子元素设置了宽度之后，就算子元素的总宽度超过的容器的宽度，flex 也不会让他们自动换行。\n假如我们需要那些子元素换行的话，就需要用到 `flex-wrap` 属性.\n`flex-wrap` 常用属性值：\n\n```css\n    /* 换行，*/\n    flex-wrap: wrap;\n    /*不换行，默认状态下的取值*/\n    flex-wrap: nowrap;\n    /*颠倒换行*/\n    flex-wrap: wrap-reverse;\n```\n\n当容器的高度过多时，被换行的元素的上下间距会平分。如果不需要平分间距的话，将容器的高度设置一下即可.\n\n\n\n","slug":"2020-08-20-flex-formp","published":1,"updated":"2020-08-29T13:11:22.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckegby7120001qovfencg7365","content":"<h4 id=\"1-何为布局\"><a href=\"#1-何为布局\" class=\"headerlink\" title=\"1. 何为布局\"></a>1. 何为布局</h4><p>布局就是用代码按照设计图的样式实现。布局是非常重要的技能，网页开发人员应该精通布局.</p>\n<a id=\"more\"></a>\n<p>在小程序中 view 标签相当于 html 里面的 div 都是一个块级元素。</p>\n<p>行内元素（inline）是不能设置宽和高的。但是（inline-block）元素可以。</p>\n<h4 id=\"2-flex-布局\"><a href=\"#2-flex-布局\" class=\"headerlink\" title=\"2. flex 布局\"></a>2. flex 布局</h4><p>flex （flexible） 弹性盒子。</p>\n<h5 id=\"2-1-flex-消除了-item-的块状特性\"><a href=\"#2-1-flex-消除了-item-的块状特性\" class=\"headerlink\" title=\"2.1 flex 消除了 item 的块状特性\"></a>2.1 flex 消除了 item 的块状特性</h5><p>使用 flex 可以实现三个元素在一行。当一个容器里面有很多的子元素时，给这个父容器添加 flex 属性，其子元素的块级元素的特征就会消失。子元素就会默认排列在一行中。</p>\n<h5 id=\"2-2-flex-direction-的应用\"><a href=\"#2-2-flex-direction-的应用\" class=\"headerlink\" title=\"2.2 flex-direction 的应用\"></a>2.2 flex-direction 的应用</h5><p>当给容器设置了 flex 属性的时候，它的子元素的 block 属性就会失去作用，就算给子元素设置block 属性也是起不了作用的。</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给父元素添加 <code>flex-direction: column;</code> 属性，其子元素就会采用纵向排列.<code>flex-direction</code> 的默认值是 <code>row</code></p>\n<h5 id=\"2-3-reverse-倒序排布\"><a href=\"#2-3-reverse-倒序排布\" class=\"headerlink\" title=\"2.3 reverse 倒序排布\"></a>2.3 reverse 倒序排布</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>flex-direction</code> 的四个常用取值：</p>\n<ol>\n<li><code>row</code></li>\n<li><code>column</code></li>\n<li><code>row-reverse</code></li>\n<li><code>column-reverse</code></li>\n</ol>\n<p>使用 flex 之后，容器的高度是自适应的，其会根据容器的内部元素的高度而改变。</p>\n<p>总结：对于 view 这个组件，它的宽度默认是 100% ，高度通常是自适应的。对于 reverse 倒序，不仅仅元素排列的顺序会发生改变，其对齐的方向也会改变。</p>\n<h5 id=\"2-4-justify-content属性\"><a href=\"#2-4-justify-content属性\" class=\"headerlink\" title=\"2.4 justify-content属性\"></a>2.4 justify-content属性</h5><p>对齐方向: <code>justify-content</code><br>常用属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">    <span class=\"comment\">/*开始的位置对齐*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-end;</span><br><span class=\"line\">    <span class=\"comment\">/*结束的位置对齐*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start;</span><br><span class=\"line\">    <span class=\"comment\">/*居中对齐*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"comment\">/*平均分布：两侧对齐，中间平均分布*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">    <span class=\"comment\">/*等距分布：对于每个子元素，他们两侧的距离均相等*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-5-主轴与交叉轴\"><a href=\"#2-5-主轴与交叉轴\" class=\"headerlink\" title=\"2.5 主轴与交叉轴\"></a>2.5 主轴与交叉轴</h5><p>flex 里面有两个轴：主轴和交叉轴。</p>\n<p>实现元素水平方向和垂直方向上面都居中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主轴和交叉轴是可以自定义的：通过 <code>flex-direction</code> 属性进行定义。<code>justify-content</code> 属性设置在主轴上面的排列方式 <code>align-items</code> 属性设置在交叉轴的排列方式。</p>\n<h5 id=\"2-6-baseline-与-stretch\"><a href=\"#2-6-baseline-与-stretch\" class=\"headerlink\" title=\"2.6 baseline 与 stretch\"></a>2.6 baseline 与 stretch</h5><p><code>align-items: stretch;</code> 在没有设置item 的高度的时候，将 <code>align-items:</code> 的属性值设置为 stretch 的时候，item 会充满父元素。</p>\n<p><code>align-items: baseline;</code>baseline 的意思是，让 items 元素按照第一个元素里面的文字对齐。</p>\n<h5 id=\"2-7-flex-wrap-与消除间距\"><a href=\"#2-7-flex-wrap-与消除间距\" class=\"headerlink\" title=\"2.7 flex-wrap 与消除间距\"></a>2.7 flex-wrap 与消除间距</h5><p><code>flex-wrap</code> 属性是设置换行。<br>当我们给设置了 flex 属性的容器的子元素设置了宽度之后，就算子元素的总宽度超过的容器的宽度，flex 也不会让他们自动换行。<br>假如我们需要那些子元素换行的话，就需要用到 <code>flex-wrap</code> 属性.<br><code>flex-wrap</code> 常用属性值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 换行，*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex-wrap</span>: <span class=\"selector-tag\">wrap</span>;</span><br><span class=\"line\"><span class=\"comment\">/*不换行，默认状态下的取值*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex-wrap</span>: <span class=\"selector-tag\">nowrap</span>;</span><br><span class=\"line\"><span class=\"comment\">/*颠倒换行*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex-wrap</span>: <span class=\"selector-tag\">wrap-reverse</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当容器的高度过多时，被换行的元素的上下间距会平分。如果不需要平分间距的话，将容器的高度设置一下即可.</p>\n","site":{"data":{}},"length":1697,"excerpt":"<h4 id=\"1-何为布局\"><a href=\"#1-何为布局\" class=\"headerlink\" title=\"1. 何为布局\"></a>1. 何为布局</h4><p>布局就是用代码按照设计图的样式实现。布局是非常重要的技能，网页开发人员应该精通布局.</p>","more":"<p>在小程序中 view 标签相当于 html 里面的 div 都是一个块级元素。</p>\n<p>行内元素（inline）是不能设置宽和高的。但是（inline-block）元素可以。</p>\n<h4 id=\"2-flex-布局\"><a href=\"#2-flex-布局\" class=\"headerlink\" title=\"2. flex 布局\"></a>2. flex 布局</h4><p>flex （flexible） 弹性盒子。</p>\n<h5 id=\"2-1-flex-消除了-item-的块状特性\"><a href=\"#2-1-flex-消除了-item-的块状特性\" class=\"headerlink\" title=\"2.1 flex 消除了 item 的块状特性\"></a>2.1 flex 消除了 item 的块状特性</h5><p>使用 flex 可以实现三个元素在一行。当一个容器里面有很多的子元素时，给这个父容器添加 flex 属性，其子元素的块级元素的特征就会消失。子元素就会默认排列在一行中。</p>\n<h5 id=\"2-2-flex-direction-的应用\"><a href=\"#2-2-flex-direction-的应用\" class=\"headerlink\" title=\"2.2 flex-direction 的应用\"></a>2.2 flex-direction 的应用</h5><p>当给容器设置了 flex 属性的时候，它的子元素的 block 属性就会失去作用，就算给子元素设置block 属性也是起不了作用的。</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给父元素添加 <code>flex-direction: column;</code> 属性，其子元素就会采用纵向排列.<code>flex-direction</code> 的默认值是 <code>row</code></p>\n<h5 id=\"2-3-reverse-倒序排布\"><a href=\"#2-3-reverse-倒序排布\" class=\"headerlink\" title=\"2.3 reverse 倒序排布\"></a>2.3 reverse 倒序排布</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>flex-direction</code> 的四个常用取值：</p>\n<ol>\n<li><code>row</code></li>\n<li><code>column</code></li>\n<li><code>row-reverse</code></li>\n<li><code>column-reverse</code></li>\n</ol>\n<p>使用 flex 之后，容器的高度是自适应的，其会根据容器的内部元素的高度而改变。</p>\n<p>总结：对于 view 这个组件，它的宽度默认是 100% ，高度通常是自适应的。对于 reverse 倒序，不仅仅元素排列的顺序会发生改变，其对齐的方向也会改变。</p>\n<h5 id=\"2-4-justify-content属性\"><a href=\"#2-4-justify-content属性\" class=\"headerlink\" title=\"2.4 justify-content属性\"></a>2.4 justify-content属性</h5><p>对齐方向: <code>justify-content</code><br>常用属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">    <span class=\"comment\">/*开始的位置对齐*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-end;</span><br><span class=\"line\">    <span class=\"comment\">/*结束的位置对齐*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start;</span><br><span class=\"line\">    <span class=\"comment\">/*居中对齐*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"comment\">/*平均分布：两侧对齐，中间平均分布*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">    <span class=\"comment\">/*等距分布：对于每个子元素，他们两侧的距离均相等*/</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-5-主轴与交叉轴\"><a href=\"#2-5-主轴与交叉轴\" class=\"headerlink\" title=\"2.5 主轴与交叉轴\"></a>2.5 主轴与交叉轴</h5><p>flex 里面有两个轴：主轴和交叉轴。</p>\n<p>实现元素水平方向和垂直方向上面都居中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主轴和交叉轴是可以自定义的：通过 <code>flex-direction</code> 属性进行定义。<code>justify-content</code> 属性设置在主轴上面的排列方式 <code>align-items</code> 属性设置在交叉轴的排列方式。</p>\n<h5 id=\"2-6-baseline-与-stretch\"><a href=\"#2-6-baseline-与-stretch\" class=\"headerlink\" title=\"2.6 baseline 与 stretch\"></a>2.6 baseline 与 stretch</h5><p><code>align-items: stretch;</code> 在没有设置item 的高度的时候，将 <code>align-items:</code> 的属性值设置为 stretch 的时候，item 会充满父元素。</p>\n<p><code>align-items: baseline;</code>baseline 的意思是，让 items 元素按照第一个元素里面的文字对齐。</p>\n<h5 id=\"2-7-flex-wrap-与消除间距\"><a href=\"#2-7-flex-wrap-与消除间距\" class=\"headerlink\" title=\"2.7 flex-wrap 与消除间距\"></a>2.7 flex-wrap 与消除间距</h5><p><code>flex-wrap</code> 属性是设置换行。<br>当我们给设置了 flex 属性的容器的子元素设置了宽度之后，就算子元素的总宽度超过的容器的宽度，flex 也不会让他们自动换行。<br>假如我们需要那些子元素换行的话，就需要用到 <code>flex-wrap</code> 属性.<br><code>flex-wrap</code> 常用属性值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 换行，*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex-wrap</span>: <span class=\"selector-tag\">wrap</span>;</span><br><span class=\"line\"><span class=\"comment\">/*不换行，默认状态下的取值*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex-wrap</span>: <span class=\"selector-tag\">nowrap</span>;</span><br><span class=\"line\"><span class=\"comment\">/*颠倒换行*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">flex-wrap</span>: <span class=\"selector-tag\">wrap-reverse</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当容器的高度过多时，被换行的元素的上下间距会平分。如果不需要平分间距的话，将容器的高度设置一下即可.</p>"},{"title":"ES6. Array","date":"2020-08-27T16:00:00.000Z","_content":"\n## 1.数组的遍历\n\n### 1.1.ES5中的遍历方式\n<!-- more -->\n#### 1. for 循环\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\nfor (let i = 0; i < array.length; i++) {\n    console.log(array[i]);    \n}\n\n// 1 2 3 a b c\n```\n\n在 for 循环中使用 break 语句\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\n// 在 for 循环中使用 break 和 countinue\nfor (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0 ) {\n        console.log(array[i]);\n        break\n    }\n}\n\n// 2\n```\n\n在 for 循环中使用 continue 语句\n\n```javascript\nlet array = [1,2,3,4,5,6,7,8,9]\nfor (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0 ) {\n        console.log(array[i]);\n        continue\n    }\n}\n\n// 2 4 6 8\n```\n\n\n\n#### 2. forEach\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\n\narray.forEach((item)=>{\n    console.log(item)\n})\n```\n\n**forEach 里面无法使用 break 和 continue 语句**\n\n\n\n#### 3. every\n\n\n\n使用 every 遍历进行遍历数组，如果回调函数没有返回值或者返回值为 false 的话，默认只遍历数组中的第一个元素。\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\narray.every((item)=>{\n    console.log(item);\n    // return false\n})\n\n// 1\n```\n\n当回调函数的返回值为 true 时，返回所有遍历元素\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\narray.every((item)=>{\n    console.log(item);\n    return true\n})\n\n// 1 2 3 a b c\n```\n\n在 every 语句里面也无法直接使用 break 以及 continue 语句，但是我们可以借助回调函数的返回值来实现 break\n\n和 continue 的特性。\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\narray.every((item)=>{\n    if (item === 2) {\n        \n    }else {\n        console.log(item);\n    }\n    return true\n})\n\n// 1 3 a b c\n```\n\n\n\n#### 4. for in\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\n\nfor (const key in array) {\n    console.log(array[key]);\n}\n```\n\nfor in（为 object 设计的遍历）遍历数组会有点瑕疵。\n\n数组也是对象 `console.log(typeof array);// object ` 如果我们不小心向数组上面添加了某个属性就会导致我们预计的结果不正确。\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\narray.a = '91'\nfor (const key in array) {\n    console.log(array[key]);\n}\n\n// 1 2 3 a b c 91\n```\n\n\n\n### 1.2.ES6 中新增的遍历方式\n\nES6 中允许自定义数据结构去遍历，这个自定义的数据结构只能用 for of 去遍历。\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\n\nfor (const iterator of array) {\n    console.log(iterator);\n}\n\n// 1 2 3 a b c\n```\n\n\n\n## 2.转换\n\n### 2.1 什么是伪数组？\n\n伪数组：arguments，nodeList。\n\n这些伪数组无法调用数组的API，如调用不了 splice。\n\n为什么将他们称之为伪数组，因为他们具有数组的特新。比如数组的长度，\n\n伪数组具备两个特征：\n\n1. 1. 以索引的方式储存数据的，\n   2. 具备一个 length 属性\n\n```\n{ 0 :'a',1:'b',length: 5}\n```\n\n\n\n### 2.2 ES5 中将伪数组转换成数组的方法\n\n```javascript\nlet args = [].slice.call(arguments) // collection\nlet imgs = [].slice.call(document.querySelectorAll('img')) // NodeList\n```\n\n\n\n### 2.3 ES6 中将伪数组转换成数组的方法\n\n```javascript\n// Array.prototype.from()\nlet args = Array.from(arguments)\nlet imgs =Array.from(document.querySelectorAll('img'))\n\n// 被转换之后的伪数组可以调用数组的 API\nimgs.forEach()\n```\n\n\n\n\n\n### 2.4 练习\n\n生成一个长度为 5 的数组，同时将数组中的长度全部设为 1 。\n\n2.4.1  ES 5 的做法\n\n```javascript\nlet array = Array(5)\nfor(var i = 0;i<array.length;i++){\n    array[i] = 1\n}\n\nconsole.log(array); // [ 1, 1, 1, 1, 1 ]\n```\n\n上述的做法稍微麻烦点。\n\n2.4.2 ES6 的做法\n\nArray.prototype.from() 接收三个参数：from(arrayLike, mapFn, thisArg)\n\n第一个参数是一个伪数组，第二个参数是回调函数，第三个参数是 执行回调函数 `mapFn` 时 `this` 对象。\n\n```javascript\nlet array = Array.from({length:5}, function(){return 7})\n\nconsole.log(array) // [ 7, 7, 7, 7, 7 ]\n```\n\n\n\n## 3.生成\n\n\n\n### 3.1 ES5 中生成数组的方式\n\n```javascript\n// 生成数组的两种方法\n// 实例一个数组\nlet array = Array(5)\n// 使用字面量的方式生成数组\nlet array = [1,2,3]\n```\n\n\n\n### 3.2 ES6 中生成数组的方式\n\n3.2.1   Array.prototype.of\n\n```javascript\nlet array = Array.of(1,1,2,3,4)\nconsole.log(array); // [ 1, 1, 2, 3, 4 ]\n```\n\n3.2.2  Array.prototype.fill\n\n```\nlet array = Array(5).fill(6)\nconsole.log(array); //[ 6, 6, 6, 6, 6 ]\n```\n\n3.2.3 使用 fill() 方法替换掉数组中的元素\n\n```javascript\n// Array.fill(value,start,end)\n\nlet array = [1,2,3,4,5]\nconsole.log(array.fill(8,2,4)) //[ 1, 2, 8, 8, 5 ]\n```\n\n\n\n## 4.查找\n\n### 4.1 ES5 中查找数组中元素的方法\n\n```javascript\n// Array.prototype.filter\n\nlet array = [1,2,3,4,5]\nlet find = array.filter(function (item) {\n     return item === 3 \n })\n\n let findNum = array.filter(function (item) {\n     return item %2 === 0 \n })\n console.log(find); // [3]\n console.log(findNum); // [2,4]\n```\n\n\n\n### ES6 中查找数组中元素的方法\n\n```javascript\n// Array.prototype.find\n\nlet array = [1,2,3,4,5]\nlet find = array.find(function (item) {\n    return item % 2 === 0\n})\nconsole.log(find); // 2\n\n// Array.prototype.findIndex\nlet findIndex = array.findIndex(function (item) {\n    return item % 2 === 0\n})\nconsole.log(findIndex); // 1\n```\n\n\n\n## 5. 练习\n\n1. JavaScript 世界里有哪些元素是可遍历的？\n2. 如何给数据结构自定义遍历?\n3. find() 和 ES5 的 filter()有什么区别？","source":"_posts/2020-08-28-JS-Array.md","raw":"---\ntitle: ES6. Array\ntags: ES6\ndate: 2020-08-28 \ncategories: web前端\n---\n\n## 1.数组的遍历\n\n### 1.1.ES5中的遍历方式\n<!-- more -->\n#### 1. for 循环\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\nfor (let i = 0; i < array.length; i++) {\n    console.log(array[i]);    \n}\n\n// 1 2 3 a b c\n```\n\n在 for 循环中使用 break 语句\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\n// 在 for 循环中使用 break 和 countinue\nfor (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0 ) {\n        console.log(array[i]);\n        break\n    }\n}\n\n// 2\n```\n\n在 for 循环中使用 continue 语句\n\n```javascript\nlet array = [1,2,3,4,5,6,7,8,9]\nfor (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0 ) {\n        console.log(array[i]);\n        continue\n    }\n}\n\n// 2 4 6 8\n```\n\n\n\n#### 2. forEach\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\n\narray.forEach((item)=>{\n    console.log(item)\n})\n```\n\n**forEach 里面无法使用 break 和 continue 语句**\n\n\n\n#### 3. every\n\n\n\n使用 every 遍历进行遍历数组，如果回调函数没有返回值或者返回值为 false 的话，默认只遍历数组中的第一个元素。\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\narray.every((item)=>{\n    console.log(item);\n    // return false\n})\n\n// 1\n```\n\n当回调函数的返回值为 true 时，返回所有遍历元素\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\narray.every((item)=>{\n    console.log(item);\n    return true\n})\n\n// 1 2 3 a b c\n```\n\n在 every 语句里面也无法直接使用 break 以及 continue 语句，但是我们可以借助回调函数的返回值来实现 break\n\n和 continue 的特性。\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\narray.every((item)=>{\n    if (item === 2) {\n        \n    }else {\n        console.log(item);\n    }\n    return true\n})\n\n// 1 3 a b c\n```\n\n\n\n#### 4. for in\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\n\nfor (const key in array) {\n    console.log(array[key]);\n}\n```\n\nfor in（为 object 设计的遍历）遍历数组会有点瑕疵。\n\n数组也是对象 `console.log(typeof array);// object ` 如果我们不小心向数组上面添加了某个属性就会导致我们预计的结果不正确。\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\narray.a = '91'\nfor (const key in array) {\n    console.log(array[key]);\n}\n\n// 1 2 3 a b c 91\n```\n\n\n\n### 1.2.ES6 中新增的遍历方式\n\nES6 中允许自定义数据结构去遍历，这个自定义的数据结构只能用 for of 去遍历。\n\n```javascript\nlet array = [1,2,3,\"a\",\"b\",\"c\"]\n\nfor (const iterator of array) {\n    console.log(iterator);\n}\n\n// 1 2 3 a b c\n```\n\n\n\n## 2.转换\n\n### 2.1 什么是伪数组？\n\n伪数组：arguments，nodeList。\n\n这些伪数组无法调用数组的API，如调用不了 splice。\n\n为什么将他们称之为伪数组，因为他们具有数组的特新。比如数组的长度，\n\n伪数组具备两个特征：\n\n1. 1. 以索引的方式储存数据的，\n   2. 具备一个 length 属性\n\n```\n{ 0 :'a',1:'b',length: 5}\n```\n\n\n\n### 2.2 ES5 中将伪数组转换成数组的方法\n\n```javascript\nlet args = [].slice.call(arguments) // collection\nlet imgs = [].slice.call(document.querySelectorAll('img')) // NodeList\n```\n\n\n\n### 2.3 ES6 中将伪数组转换成数组的方法\n\n```javascript\n// Array.prototype.from()\nlet args = Array.from(arguments)\nlet imgs =Array.from(document.querySelectorAll('img'))\n\n// 被转换之后的伪数组可以调用数组的 API\nimgs.forEach()\n```\n\n\n\n\n\n### 2.4 练习\n\n生成一个长度为 5 的数组，同时将数组中的长度全部设为 1 。\n\n2.4.1  ES 5 的做法\n\n```javascript\nlet array = Array(5)\nfor(var i = 0;i<array.length;i++){\n    array[i] = 1\n}\n\nconsole.log(array); // [ 1, 1, 1, 1, 1 ]\n```\n\n上述的做法稍微麻烦点。\n\n2.4.2 ES6 的做法\n\nArray.prototype.from() 接收三个参数：from(arrayLike, mapFn, thisArg)\n\n第一个参数是一个伪数组，第二个参数是回调函数，第三个参数是 执行回调函数 `mapFn` 时 `this` 对象。\n\n```javascript\nlet array = Array.from({length:5}, function(){return 7})\n\nconsole.log(array) // [ 7, 7, 7, 7, 7 ]\n```\n\n\n\n## 3.生成\n\n\n\n### 3.1 ES5 中生成数组的方式\n\n```javascript\n// 生成数组的两种方法\n// 实例一个数组\nlet array = Array(5)\n// 使用字面量的方式生成数组\nlet array = [1,2,3]\n```\n\n\n\n### 3.2 ES6 中生成数组的方式\n\n3.2.1   Array.prototype.of\n\n```javascript\nlet array = Array.of(1,1,2,3,4)\nconsole.log(array); // [ 1, 1, 2, 3, 4 ]\n```\n\n3.2.2  Array.prototype.fill\n\n```\nlet array = Array(5).fill(6)\nconsole.log(array); //[ 6, 6, 6, 6, 6 ]\n```\n\n3.2.3 使用 fill() 方法替换掉数组中的元素\n\n```javascript\n// Array.fill(value,start,end)\n\nlet array = [1,2,3,4,5]\nconsole.log(array.fill(8,2,4)) //[ 1, 2, 8, 8, 5 ]\n```\n\n\n\n## 4.查找\n\n### 4.1 ES5 中查找数组中元素的方法\n\n```javascript\n// Array.prototype.filter\n\nlet array = [1,2,3,4,5]\nlet find = array.filter(function (item) {\n     return item === 3 \n })\n\n let findNum = array.filter(function (item) {\n     return item %2 === 0 \n })\n console.log(find); // [3]\n console.log(findNum); // [2,4]\n```\n\n\n\n### ES6 中查找数组中元素的方法\n\n```javascript\n// Array.prototype.find\n\nlet array = [1,2,3,4,5]\nlet find = array.find(function (item) {\n    return item % 2 === 0\n})\nconsole.log(find); // 2\n\n// Array.prototype.findIndex\nlet findIndex = array.findIndex(function (item) {\n    return item % 2 === 0\n})\nconsole.log(findIndex); // 1\n```\n\n\n\n## 5. 练习\n\n1. JavaScript 世界里有哪些元素是可遍历的？\n2. 如何给数据结构自定义遍历?\n3. find() 和 ES5 的 filter()有什么区别？","slug":"2020-08-28-JS-Array","published":1,"updated":"2020-08-29T13:14:05.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckegby7180003qovf0ee13hrl","content":"<h2 id=\"1-数组的遍历\"><a href=\"#1-数组的遍历\" class=\"headerlink\" title=\"1.数组的遍历\"></a>1.数组的遍历</h2><h3 id=\"1-1-ES5中的遍历方式\"><a href=\"#1-1-ES5中的遍历方式\" class=\"headerlink\" title=\"1.1.ES5中的遍历方式\"></a>1.1.ES5中的遍历方式</h3><a id=\"more\"></a>\n<h4 id=\"1-for-循环\"><a href=\"#1-for-循环\" class=\"headerlink\" title=\"1. for 循环\"></a>1. for 循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(array[i]);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 a b c</span></span><br></pre></td></tr></table></figure>\n\n<p>在 for 循环中使用 break 语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">// 在 for 循环中使用 break 和 countinue</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] % <span class=\"number\">2</span> === <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(array[i]);</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>在 for 循环中使用 continue 语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] % <span class=\"number\">2</span> === <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(array[i]);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2 4 6 8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-forEach\"><a href=\"#2-forEach\" class=\"headerlink\" title=\"2. forEach\"></a>2. forEach</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">array.forEach(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>forEach 里面无法使用 break 和 continue 语句</strong></p>\n<h4 id=\"3-every\"><a href=\"#3-every\" class=\"headerlink\" title=\"3. every\"></a>3. every</h4><p>使用 every 遍历进行遍历数组，如果回调函数没有返回值或者返回值为 false 的话，默认只遍历数组中的第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">array.every(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    <span class=\"comment\">// return false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>当回调函数的返回值为 true 时，返回所有遍历元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">array.every(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 a b c</span></span><br></pre></td></tr></table></figure>\n\n<p>在 every 语句里面也无法直接使用 break 以及 continue 语句，但是我们可以借助回调函数的返回值来实现 break</p>\n<p>和 continue 的特性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">array.every(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 3 a b c</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-for-in\"><a href=\"#4-for-in\" class=\"headerlink\" title=\"4. for in\"></a>4. for in</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(array[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for in（为 object 设计的遍历）遍历数组会有点瑕疵。</p>\n<p>数组也是对象 <code>console.log(typeof array);// object </code> 如果我们不小心向数组上面添加了某个属性就会导致我们预计的结果不正确。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">array.a = <span class=\"string\">&#x27;91&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(array[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 a b c 91</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-ES6-中新增的遍历方式\"><a href=\"#1-2-ES6-中新增的遍历方式\" class=\"headerlink\" title=\"1.2.ES6 中新增的遍历方式\"></a>1.2.ES6 中新增的遍历方式</h3><p>ES6 中允许自定义数据结构去遍历，这个自定义的数据结构只能用 for of 去遍历。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> iterator <span class=\"keyword\">of</span> array) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(iterator);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 a b c</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-转换\"><a href=\"#2-转换\" class=\"headerlink\" title=\"2.转换\"></a>2.转换</h2><h3 id=\"2-1-什么是伪数组？\"><a href=\"#2-1-什么是伪数组？\" class=\"headerlink\" title=\"2.1 什么是伪数组？\"></a>2.1 什么是伪数组？</h3><p>伪数组：arguments，nodeList。</p>\n<p>这些伪数组无法调用数组的API，如调用不了 splice。</p>\n<p>为什么将他们称之为伪数组，因为他们具有数组的特新。比如数组的长度，</p>\n<p>伪数组具备两个特征：</p>\n<ol>\n<li><ol>\n<li>以索引的方式储存数据的，</li>\n<li>具备一个 length 属性</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attribute\">0 </span>:<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">1</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"attribute\">length</span>: <span class=\"number\">5</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-ES5-中将伪数组转换成数组的方法\"><a href=\"#2-2-ES5-中将伪数组转换成数组的方法\" class=\"headerlink\" title=\"2.2 ES5 中将伪数组转换成数组的方法\"></a>2.2 ES5 中将伪数组转换成数组的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> args = [].slice.call(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// collection</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imgs = [].slice.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>)) <span class=\"comment\">// NodeList</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-ES6-中将伪数组转换成数组的方法\"><a href=\"#2-3-ES6-中将伪数组转换成数组的方法\" class=\"headerlink\" title=\"2.3 ES6 中将伪数组转换成数组的方法\"></a>2.3 ES6 中将伪数组转换成数组的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype.from()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> imgs =<span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被转换之后的伪数组可以调用数组的 API</span></span><br><span class=\"line\">imgs.forEach()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-4-练习\"><a href=\"#2-4-练习\" class=\"headerlink\" title=\"2.4 练习\"></a>2.4 练习</h3><p>生成一个长度为 5 的数组，同时将数组中的长度全部设为 1 。</p>\n<p>2.4.1  ES 5 的做法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;array.length;i++)&#123;</span><br><span class=\"line\">    array[i] = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [ 1, 1, 1, 1, 1 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>上述的做法稍微麻烦点。</p>\n<p>2.4.2 ES6 的做法</p>\n<p>Array.prototype.from() 接收三个参数：from(arrayLike, mapFn, thisArg)</p>\n<p>第一个参数是一个伪数组，第二个参数是回调函数，第三个参数是 执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"built_in\">Array</span>.from(&#123;<span class=\"attr\">length</span>:<span class=\"number\">5</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">7</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [ 7, 7, 7, 7, 7 ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-生成\"><a href=\"#3-生成\" class=\"headerlink\" title=\"3.生成\"></a>3.生成</h2><h3 id=\"3-1-ES5-中生成数组的方式\"><a href=\"#3-1-ES5-中生成数组的方式\" class=\"headerlink\" title=\"3.1 ES5 中生成数组的方式\"></a>3.1 ES5 中生成数组的方式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成数组的两种方法</span></span><br><span class=\"line\"><span class=\"comment\">// 实例一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 使用字面量的方式生成数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-ES6-中生成数组的方式\"><a href=\"#3-2-ES6-中生成数组的方式\" class=\"headerlink\" title=\"3.2 ES6 中生成数组的方式\"></a>3.2 ES6 中生成数组的方式</h3><p>3.2.1   Array.prototype.of</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [ 1, 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>3.2.2  Array.prototype.fill</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let<span class=\"built_in\"> array </span>= Array(5).fill(6)</span><br><span class=\"line\">console.log(array); //[ 6, 6, 6, 6, 6 ]</span><br></pre></td></tr></table></figure>\n\n<p>3.2.3 使用 fill() 方法替换掉数组中的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.fill(value,start,end)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.fill(<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>)) <span class=\"comment\">//[ 1, 2, 8, 8, 5 ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-查找\"><a href=\"#4-查找\" class=\"headerlink\" title=\"4.查找\"></a>4.查找</h2><h3 id=\"4-1-ES5-中查找数组中元素的方法\"><a href=\"#4-1-ES5-中查找数组中元素的方法\" class=\"headerlink\" title=\"4.1 ES5 中查找数组中元素的方法\"></a>4.1 ES5 中查找数组中元素的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype.filter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> find = array.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> item === <span class=\"number\">3</span> </span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">let</span> findNum = array.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> item %<span class=\"number\">2</span> === <span class=\"number\">0</span> </span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(find); <span class=\"comment\">// [3]</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(findNum); <span class=\"comment\">// [2,4]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ES6-中查找数组中元素的方法\"><a href=\"#ES6-中查找数组中元素的方法\" class=\"headerlink\" title=\"ES6 中查找数组中元素的方法\"></a>ES6 中查找数组中元素的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype.find</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> find = array.find(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(find); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.findIndex</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findIndex = array.findIndex(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(findIndex); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-练习\"><a href=\"#5-练习\" class=\"headerlink\" title=\"5. 练习\"></a>5. 练习</h2><ol>\n<li>JavaScript 世界里有哪些元素是可遍历的？</li>\n<li>如何给数据结构自定义遍历?</li>\n<li>find() 和 ES5 的 filter()有什么区别？</li>\n</ol>\n","site":{"data":{}},"length":3770,"excerpt":"<h2 id=\"1-数组的遍历\"><a href=\"#1-数组的遍历\" class=\"headerlink\" title=\"1.数组的遍历\"></a>1.数组的遍历</h2><h3 id=\"1-1-ES5中的遍历方式\"><a href=\"#1-1-ES5中的遍历方式\" class=\"headerlink\" title=\"1.1.ES5中的遍历方式\"></a>1.1.ES5中的遍历方式</h3>","more":"<h4 id=\"1-for-循环\"><a href=\"#1-for-循环\" class=\"headerlink\" title=\"1. for 循环\"></a>1. for 循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(array[i]);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 a b c</span></span><br></pre></td></tr></table></figure>\n\n<p>在 for 循环中使用 break 语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">// 在 for 循环中使用 break 和 countinue</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] % <span class=\"number\">2</span> === <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(array[i]);</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>在 for 循环中使用 continue 语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] % <span class=\"number\">2</span> === <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(array[i]);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2 4 6 8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-forEach\"><a href=\"#2-forEach\" class=\"headerlink\" title=\"2. forEach\"></a>2. forEach</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">array.forEach(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>forEach 里面无法使用 break 和 continue 语句</strong></p>\n<h4 id=\"3-every\"><a href=\"#3-every\" class=\"headerlink\" title=\"3. every\"></a>3. every</h4><p>使用 every 遍历进行遍历数组，如果回调函数没有返回值或者返回值为 false 的话，默认只遍历数组中的第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">array.every(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    <span class=\"comment\">// return false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>当回调函数的返回值为 true 时，返回所有遍历元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">array.every(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 a b c</span></span><br></pre></td></tr></table></figure>\n\n<p>在 every 语句里面也无法直接使用 break 以及 continue 语句，但是我们可以借助回调函数的返回值来实现 break</p>\n<p>和 continue 的特性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">array.every(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 3 a b c</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-for-in\"><a href=\"#4-for-in\" class=\"headerlink\" title=\"4. for in\"></a>4. for in</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(array[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for in（为 object 设计的遍历）遍历数组会有点瑕疵。</p>\n<p>数组也是对象 <code>console.log(typeof array);// object </code> 如果我们不小心向数组上面添加了某个属性就会导致我们预计的结果不正确。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">array.a = <span class=\"string\">&#x27;91&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(array[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 a b c 91</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-ES6-中新增的遍历方式\"><a href=\"#1-2-ES6-中新增的遍历方式\" class=\"headerlink\" title=\"1.2.ES6 中新增的遍历方式\"></a>1.2.ES6 中新增的遍历方式</h3><p>ES6 中允许自定义数据结构去遍历，这个自定义的数据结构只能用 for of 去遍历。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> iterator <span class=\"keyword\">of</span> array) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(iterator);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 a b c</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-转换\"><a href=\"#2-转换\" class=\"headerlink\" title=\"2.转换\"></a>2.转换</h2><h3 id=\"2-1-什么是伪数组？\"><a href=\"#2-1-什么是伪数组？\" class=\"headerlink\" title=\"2.1 什么是伪数组？\"></a>2.1 什么是伪数组？</h3><p>伪数组：arguments，nodeList。</p>\n<p>这些伪数组无法调用数组的API，如调用不了 splice。</p>\n<p>为什么将他们称之为伪数组，因为他们具有数组的特新。比如数组的长度，</p>\n<p>伪数组具备两个特征：</p>\n<ol>\n<li><ol>\n<li>以索引的方式储存数据的，</li>\n<li>具备一个 length 属性</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attribute\">0 </span>:<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">1</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"attribute\">length</span>: <span class=\"number\">5</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-ES5-中将伪数组转换成数组的方法\"><a href=\"#2-2-ES5-中将伪数组转换成数组的方法\" class=\"headerlink\" title=\"2.2 ES5 中将伪数组转换成数组的方法\"></a>2.2 ES5 中将伪数组转换成数组的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> args = [].slice.call(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// collection</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imgs = [].slice.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>)) <span class=\"comment\">// NodeList</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-ES6-中将伪数组转换成数组的方法\"><a href=\"#2-3-ES6-中将伪数组转换成数组的方法\" class=\"headerlink\" title=\"2.3 ES6 中将伪数组转换成数组的方法\"></a>2.3 ES6 中将伪数组转换成数组的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype.from()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> imgs =<span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;img&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被转换之后的伪数组可以调用数组的 API</span></span><br><span class=\"line\">imgs.forEach()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-4-练习\"><a href=\"#2-4-练习\" class=\"headerlink\" title=\"2.4 练习\"></a>2.4 练习</h3><p>生成一个长度为 5 的数组，同时将数组中的长度全部设为 1 。</p>\n<p>2.4.1  ES 5 的做法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;array.length;i++)&#123;</span><br><span class=\"line\">    array[i] = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [ 1, 1, 1, 1, 1 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>上述的做法稍微麻烦点。</p>\n<p>2.4.2 ES6 的做法</p>\n<p>Array.prototype.from() 接收三个参数：from(arrayLike, mapFn, thisArg)</p>\n<p>第一个参数是一个伪数组，第二个参数是回调函数，第三个参数是 执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"built_in\">Array</span>.from(&#123;<span class=\"attr\">length</span>:<span class=\"number\">5</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">7</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [ 7, 7, 7, 7, 7 ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-生成\"><a href=\"#3-生成\" class=\"headerlink\" title=\"3.生成\"></a>3.生成</h2><h3 id=\"3-1-ES5-中生成数组的方式\"><a href=\"#3-1-ES5-中生成数组的方式\" class=\"headerlink\" title=\"3.1 ES5 中生成数组的方式\"></a>3.1 ES5 中生成数组的方式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成数组的两种方法</span></span><br><span class=\"line\"><span class=\"comment\">// 实例一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 使用字面量的方式生成数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-ES6-中生成数组的方式\"><a href=\"#3-2-ES6-中生成数组的方式\" class=\"headerlink\" title=\"3.2 ES6 中生成数组的方式\"></a>3.2 ES6 中生成数组的方式</h3><p>3.2.1   Array.prototype.of</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [ 1, 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>3.2.2  Array.prototype.fill</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let<span class=\"built_in\"> array </span>= Array(5).fill(6)</span><br><span class=\"line\">console.log(array); //[ 6, 6, 6, 6, 6 ]</span><br></pre></td></tr></table></figure>\n\n<p>3.2.3 使用 fill() 方法替换掉数组中的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.fill(value,start,end)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.fill(<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>)) <span class=\"comment\">//[ 1, 2, 8, 8, 5 ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-查找\"><a href=\"#4-查找\" class=\"headerlink\" title=\"4.查找\"></a>4.查找</h2><h3 id=\"4-1-ES5-中查找数组中元素的方法\"><a href=\"#4-1-ES5-中查找数组中元素的方法\" class=\"headerlink\" title=\"4.1 ES5 中查找数组中元素的方法\"></a>4.1 ES5 中查找数组中元素的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype.filter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> find = array.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> item === <span class=\"number\">3</span> </span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">let</span> findNum = array.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> item %<span class=\"number\">2</span> === <span class=\"number\">0</span> </span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(find); <span class=\"comment\">// [3]</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(findNum); <span class=\"comment\">// [2,4]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ES6-中查找数组中元素的方法\"><a href=\"#ES6-中查找数组中元素的方法\" class=\"headerlink\" title=\"ES6 中查找数组中元素的方法\"></a>ES6 中查找数组中元素的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype.find</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> find = array.find(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(find); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.findIndex</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findIndex = array.findIndex(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(findIndex); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-练习\"><a href=\"#5-练习\" class=\"headerlink\" title=\"5. 练习\"></a>5. 练习</h2><ol>\n<li>JavaScript 世界里有哪些元素是可遍历的？</li>\n<li>如何给数据结构自定义遍历?</li>\n<li>find() 和 ES5 的 filter()有什么区别？</li>\n</ol>"},{"title":"在小程序中使用自定义组件","date":"2020-08-21T16:00:00.000Z","_content":"#### 1. 新建组件\n1. 新建文件夹 components。\n2. 在 components 里新建 like 文件夹。\n3. 在 like 文件夹上右键，新建 components 就可以快速创建一个组件了。\n<!-- more -->\n#### 2. 引用组件\n\n我们有一个 classic 页面文件夹，在 `classic.json` 里面就可以引入组件。` \"l-like\"` 是组件名称，可以自定义，其后面的是组件的路径。\n```javascript\n{\n  \"usingComponents\": {\n    \"l-like\": \"../components/like/index\"\n  }\n}\n```\n不仅仅可以在一个页面里面引入组件，当一个组件在多个页面中使用时，可以直接在 `app.json` 里面引入，这样就可以直接在其他的页面引入了。\n\n#### 3. 使用组件\n使用组件和使用标签是一样的，我们在页面文件 `classic.wxml` 使用刚刚定义的组件 \n```html\n<l-like></l-like>\n```\n\n#### 4. 相对路径和绝对路径\n小程序中使用绝对路径是 `/` .使用相对路径 `../` 返回上一级路径\n\n#### 5.组件只能继承极少数全局样式\n\n只有 font color 属性会从组件外继承到组件内。\n\n#### 6.组件最好不要有留白间距\n\n组件最好不要留有空白间距，因为这个会让组件变大。使用 `line-height` 可以消除字体的留白间距。\n\n给元素设置了`display: flex` 之后，容器的子元素虽然失去了block属性的作用，但是其本身的block特征并没有消失，设置 `inline-flex` 可以让元素的宽度自适应\n\n#### 7.给组件添加事件\n\n绑定事件：\n`bind:tap=\"onLike\"` 也可以使用 `catch:tap=\"onLike\"`\nbind 不会阻止事件向上冒泡，catch 会阻止事件向上冒泡。\n```javascript\n<view bind:tap=\"onLike\"></view>\n```\n#### 8. 数据的使用\n使用数据的原则，如果数据仅是组件内部使用的话，那么就将数据定义在 `data` 里面，如果要与外部发生交互的话，那么就将定义在 \t`properties` 里面。\n\n属性的定义：\n```javascript\nproperties: {\n    count:{\n      // 必须要填的属性\n      type:Boolean,\n      // 非必需，属性的初始值，\n      value: false,\n      // 非必须，\n      observer(newVal, oldVal, changedPath) {\n      }\n    }\n  }\n```\n使用方式：\n无论是定义的属性或者是数据的使用方式都是一样的。\n在 `index.js` 里面定义\n```javascript\t\nComponent({\n  properties: {\n    count:{\n      type:Number\n    },\n    like:{\n      type:Boolean\n    }\n  },\n  data: {\n    yesSrc:'images/like.png',\n    noSrc:'images/like@dis.png'\n  },\n  methods: {\n      onLike(){\n        // 获取属性 count\n        let count = this.properties.count\n        let like = this.properties.like\n\n        // 先改变 like 的状态\n        like = !like\n        // 根据 like 的状态改变 count 数\n        count = like?count+1:count-1\n        // 更新数据 使用 this.setData\n        this.setData({\n          count,\n          like,\n        })\n      }\n  }\n})\n```\n\n在 `index.wxml` 中使用：\n```html\n<view bind:tap=\"onLike\" class=\"container\">\n    <image  class=\"img\" src=\"{{like?yesSrc:noSrc}}\"></image>\n    <text class=\"text\">{{count}}</text>\n</view>\n```\n","source":"_posts/2020-08-22-mp-cmp.md","raw":"\n---\ntitle: 在小程序中使用自定义组件\ntags: 小程序\ndate: 2020-08-22 \ncategories: web前端\n---\n#### 1. 新建组件\n1. 新建文件夹 components。\n2. 在 components 里新建 like 文件夹。\n3. 在 like 文件夹上右键，新建 components 就可以快速创建一个组件了。\n<!-- more -->\n#### 2. 引用组件\n\n我们有一个 classic 页面文件夹，在 `classic.json` 里面就可以引入组件。` \"l-like\"` 是组件名称，可以自定义，其后面的是组件的路径。\n```javascript\n{\n  \"usingComponents\": {\n    \"l-like\": \"../components/like/index\"\n  }\n}\n```\n不仅仅可以在一个页面里面引入组件，当一个组件在多个页面中使用时，可以直接在 `app.json` 里面引入，这样就可以直接在其他的页面引入了。\n\n#### 3. 使用组件\n使用组件和使用标签是一样的，我们在页面文件 `classic.wxml` 使用刚刚定义的组件 \n```html\n<l-like></l-like>\n```\n\n#### 4. 相对路径和绝对路径\n小程序中使用绝对路径是 `/` .使用相对路径 `../` 返回上一级路径\n\n#### 5.组件只能继承极少数全局样式\n\n只有 font color 属性会从组件外继承到组件内。\n\n#### 6.组件最好不要有留白间距\n\n组件最好不要留有空白间距，因为这个会让组件变大。使用 `line-height` 可以消除字体的留白间距。\n\n给元素设置了`display: flex` 之后，容器的子元素虽然失去了block属性的作用，但是其本身的block特征并没有消失，设置 `inline-flex` 可以让元素的宽度自适应\n\n#### 7.给组件添加事件\n\n绑定事件：\n`bind:tap=\"onLike\"` 也可以使用 `catch:tap=\"onLike\"`\nbind 不会阻止事件向上冒泡，catch 会阻止事件向上冒泡。\n```javascript\n<view bind:tap=\"onLike\"></view>\n```\n#### 8. 数据的使用\n使用数据的原则，如果数据仅是组件内部使用的话，那么就将数据定义在 `data` 里面，如果要与外部发生交互的话，那么就将定义在 \t`properties` 里面。\n\n属性的定义：\n```javascript\nproperties: {\n    count:{\n      // 必须要填的属性\n      type:Boolean,\n      // 非必需，属性的初始值，\n      value: false,\n      // 非必须，\n      observer(newVal, oldVal, changedPath) {\n      }\n    }\n  }\n```\n使用方式：\n无论是定义的属性或者是数据的使用方式都是一样的。\n在 `index.js` 里面定义\n```javascript\t\nComponent({\n  properties: {\n    count:{\n      type:Number\n    },\n    like:{\n      type:Boolean\n    }\n  },\n  data: {\n    yesSrc:'images/like.png',\n    noSrc:'images/like@dis.png'\n  },\n  methods: {\n      onLike(){\n        // 获取属性 count\n        let count = this.properties.count\n        let like = this.properties.like\n\n        // 先改变 like 的状态\n        like = !like\n        // 根据 like 的状态改变 count 数\n        count = like?count+1:count-1\n        // 更新数据 使用 this.setData\n        this.setData({\n          count,\n          like,\n        })\n      }\n  }\n})\n```\n\n在 `index.wxml` 中使用：\n```html\n<view bind:tap=\"onLike\" class=\"container\">\n    <image  class=\"img\" src=\"{{like?yesSrc:noSrc}}\"></image>\n    <text class=\"text\">{{count}}</text>\n</view>\n```\n","slug":"2020-08-22-mp-cmp","published":1,"updated":"2020-08-29T13:11:19.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckegby71f0007qovf38n44oda","content":"<h4 id=\"1-新建组件\"><a href=\"#1-新建组件\" class=\"headerlink\" title=\"1. 新建组件\"></a>1. 新建组件</h4><ol>\n<li>新建文件夹 components。</li>\n<li>在 components 里新建 like 文件夹。</li>\n<li>在 like 文件夹上右键，新建 components 就可以快速创建一个组件了。<a id=\"more\"></a>\n<h4 id=\"2-引用组件\"><a href=\"#2-引用组件\" class=\"headerlink\" title=\"2. 引用组件\"></a>2. 引用组件</h4></li>\n</ol>\n<p>我们有一个 classic 页面文件夹，在 <code>classic.json</code> 里面就可以引入组件。<code> &quot;l-like&quot;</code> 是组件名称，可以自定义，其后面的是组件的路径。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;usingComponents&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;l-like&quot;</span>: <span class=\"string\">&quot;../components/like/index&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅仅可以在一个页面里面引入组件，当一个组件在多个页面中使用时，可以直接在 <code>app.json</code> 里面引入，这样就可以直接在其他的页面引入了。</p>\n<h4 id=\"3-使用组件\"><a href=\"#3-使用组件\" class=\"headerlink\" title=\"3. 使用组件\"></a>3. 使用组件</h4><p>使用组件和使用标签是一样的，我们在页面文件 <code>classic.wxml</code> 使用刚刚定义的组件 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">l-like</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">l-like</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-相对路径和绝对路径\"><a href=\"#4-相对路径和绝对路径\" class=\"headerlink\" title=\"4. 相对路径和绝对路径\"></a>4. 相对路径和绝对路径</h4><p>小程序中使用绝对路径是 <code>/</code> .使用相对路径 <code>../</code> 返回上一级路径</p>\n<h4 id=\"5-组件只能继承极少数全局样式\"><a href=\"#5-组件只能继承极少数全局样式\" class=\"headerlink\" title=\"5.组件只能继承极少数全局样式\"></a>5.组件只能继承极少数全局样式</h4><p>只有 font color 属性会从组件外继承到组件内。</p>\n<h4 id=\"6-组件最好不要有留白间距\"><a href=\"#6-组件最好不要有留白间距\" class=\"headerlink\" title=\"6.组件最好不要有留白间距\"></a>6.组件最好不要有留白间距</h4><p>组件最好不要留有空白间距，因为这个会让组件变大。使用 <code>line-height</code> 可以消除字体的留白间距。</p>\n<p>给元素设置了<code>display: flex</code> 之后，容器的子元素虽然失去了block属性的作用，但是其本身的block特征并没有消失，设置 <code>inline-flex</code> 可以让元素的宽度自适应</p>\n<h4 id=\"7-给组件添加事件\"><a href=\"#7-给组件添加事件\" class=\"headerlink\" title=\"7.给组件添加事件\"></a>7.给组件添加事件</h4><p>绑定事件：<br><code>bind:tap=&quot;onLike&quot;</code> 也可以使用 <code>catch:tap=&quot;onLike&quot;</code><br>bind 不会阻止事件向上冒泡，catch 会阻止事件向上冒泡。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view bind:tap=<span class=\"string\">&quot;onLike&quot;</span>&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-数据的使用\"><a href=\"#8-数据的使用\" class=\"headerlink\" title=\"8. 数据的使用\"></a>8. 数据的使用</h4><p>使用数据的原则，如果数据仅是组件内部使用的话，那么就将数据定义在 <code>data</code> 里面，如果要与外部发生交互的话，那么就将定义在     <code>properties</code> 里面。</p>\n<p>属性的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">properties: &#123;</span><br><span class=\"line\">    count:&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 必须要填的属性</span></span><br><span class=\"line\">      type:<span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 非必需，属性的初始值，</span></span><br><span class=\"line\">      value: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 非必须，</span></span><br><span class=\"line\">      observer(newVal, oldVal, changedPath) &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>使用方式：<br>无论是定义的属性或者是数据的使用方式都是一样的。<br>在 <code>index.js</code> 里面定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Component(&#123;</span><br><span class=\"line\">  properties: &#123;</span><br><span class=\"line\">    count:&#123;</span><br><span class=\"line\">      type:<span class=\"built_in\">Number</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    like:&#123;</span><br><span class=\"line\">      type:<span class=\"built_in\">Boolean</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    yesSrc:<span class=\"string\">&#x27;images/like.png&#x27;</span>,</span><br><span class=\"line\">    noSrc:<span class=\"string\">&#x27;images/like@dis.png&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      onLike()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取属性 count</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"built_in\">this</span>.properties.count</span><br><span class=\"line\">        <span class=\"keyword\">let</span> like = <span class=\"built_in\">this</span>.properties.like</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 先改变 like 的状态</span></span><br><span class=\"line\">        like = !like</span><br><span class=\"line\">        <span class=\"comment\">// 根据 like 的状态改变 count 数</span></span><br><span class=\"line\">        count = like?count+<span class=\"number\">1</span>:count<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\">// 更新数据 使用 this.setData</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">          count,</span><br><span class=\"line\">          like,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>index.wxml</code> 中使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bind:tap</span>=<span class=\"string\">&quot;onLike&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">image</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;img&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;like?yesSrc:noSrc&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1853,"excerpt":"<h4 id=\"1-新建组件\"><a href=\"#1-新建组件\" class=\"headerlink\" title=\"1. 新建组件\"></a>1. 新建组件</h4><ol>\n<li>新建文件夹 components。</li>\n<li>在 components 里新建 like 文件夹。</li>\n<li>在 like 文件夹上右键，新建 components 就可以快速创建一个组件了。","more":"<h4 id=\"2-引用组件\"><a href=\"#2-引用组件\" class=\"headerlink\" title=\"2. 引用组件\"></a>2. 引用组件</h4></li>\n</ol>\n<p>我们有一个 classic 页面文件夹，在 <code>classic.json</code> 里面就可以引入组件。<code> &quot;l-like&quot;</code> 是组件名称，可以自定义，其后面的是组件的路径。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;usingComponents&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;l-like&quot;</span>: <span class=\"string\">&quot;../components/like/index&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅仅可以在一个页面里面引入组件，当一个组件在多个页面中使用时，可以直接在 <code>app.json</code> 里面引入，这样就可以直接在其他的页面引入了。</p>\n<h4 id=\"3-使用组件\"><a href=\"#3-使用组件\" class=\"headerlink\" title=\"3. 使用组件\"></a>3. 使用组件</h4><p>使用组件和使用标签是一样的，我们在页面文件 <code>classic.wxml</code> 使用刚刚定义的组件 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">l-like</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">l-like</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-相对路径和绝对路径\"><a href=\"#4-相对路径和绝对路径\" class=\"headerlink\" title=\"4. 相对路径和绝对路径\"></a>4. 相对路径和绝对路径</h4><p>小程序中使用绝对路径是 <code>/</code> .使用相对路径 <code>../</code> 返回上一级路径</p>\n<h4 id=\"5-组件只能继承极少数全局样式\"><a href=\"#5-组件只能继承极少数全局样式\" class=\"headerlink\" title=\"5.组件只能继承极少数全局样式\"></a>5.组件只能继承极少数全局样式</h4><p>只有 font color 属性会从组件外继承到组件内。</p>\n<h4 id=\"6-组件最好不要有留白间距\"><a href=\"#6-组件最好不要有留白间距\" class=\"headerlink\" title=\"6.组件最好不要有留白间距\"></a>6.组件最好不要有留白间距</h4><p>组件最好不要留有空白间距，因为这个会让组件变大。使用 <code>line-height</code> 可以消除字体的留白间距。</p>\n<p>给元素设置了<code>display: flex</code> 之后，容器的子元素虽然失去了block属性的作用，但是其本身的block特征并没有消失，设置 <code>inline-flex</code> 可以让元素的宽度自适应</p>\n<h4 id=\"7-给组件添加事件\"><a href=\"#7-给组件添加事件\" class=\"headerlink\" title=\"7.给组件添加事件\"></a>7.给组件添加事件</h4><p>绑定事件：<br><code>bind:tap=&quot;onLike&quot;</code> 也可以使用 <code>catch:tap=&quot;onLike&quot;</code><br>bind 不会阻止事件向上冒泡，catch 会阻止事件向上冒泡。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view bind:tap=<span class=\"string\">&quot;onLike&quot;</span>&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-数据的使用\"><a href=\"#8-数据的使用\" class=\"headerlink\" title=\"8. 数据的使用\"></a>8. 数据的使用</h4><p>使用数据的原则，如果数据仅是组件内部使用的话，那么就将数据定义在 <code>data</code> 里面，如果要与外部发生交互的话，那么就将定义在     <code>properties</code> 里面。</p>\n<p>属性的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">properties: &#123;</span><br><span class=\"line\">    count:&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 必须要填的属性</span></span><br><span class=\"line\">      type:<span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 非必需，属性的初始值，</span></span><br><span class=\"line\">      value: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 非必须，</span></span><br><span class=\"line\">      observer(newVal, oldVal, changedPath) &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>使用方式：<br>无论是定义的属性或者是数据的使用方式都是一样的。<br>在 <code>index.js</code> 里面定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Component(&#123;</span><br><span class=\"line\">  properties: &#123;</span><br><span class=\"line\">    count:&#123;</span><br><span class=\"line\">      type:<span class=\"built_in\">Number</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    like:&#123;</span><br><span class=\"line\">      type:<span class=\"built_in\">Boolean</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    yesSrc:<span class=\"string\">&#x27;images/like.png&#x27;</span>,</span><br><span class=\"line\">    noSrc:<span class=\"string\">&#x27;images/like@dis.png&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      onLike()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取属性 count</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"built_in\">this</span>.properties.count</span><br><span class=\"line\">        <span class=\"keyword\">let</span> like = <span class=\"built_in\">this</span>.properties.like</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 先改变 like 的状态</span></span><br><span class=\"line\">        like = !like</span><br><span class=\"line\">        <span class=\"comment\">// 根据 like 的状态改变 count 数</span></span><br><span class=\"line\">        count = like?count+<span class=\"number\">1</span>:count<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\">// 更新数据 使用 this.setData</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">          count,</span><br><span class=\"line\">          like,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>index.wxml</code> 中使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bind:tap</span>=<span class=\"string\">&quot;onLike&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">image</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;img&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;like?yesSrc:noSrc&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"ES6. Scope","date":"2020-08-21T16:00:00.000Z","_content":"\n\n### 1. 全局作用域\n\n在 `JS` 里定义一个全局变量\n<!-- more -->\n```javascript\nvar a =12;\n```\n\n定义变量的另外一种方式：\n\n```javascript\nb = 1234;\n```\n虽然这个和上面的表达式都具有全局作用域。严格来说，这个表达式不可以被称之为全局变量。变量 `a` 是作为全局变量使用，`b` 是作为全局对象 `window` 的属性来使用的。定义的变量是不可以通过`delete`被删除的，而属性是可以被`delete`删除的。\n\n```javascript\ndelete a; // false\ndelete b;// true\n在函数内部定义的变量，没有使用 var 定义的话，是全局变量。挂载到 window 上面\nfunction fn(){\n    ab = 100;\n}\nfn()\n```\n### 2. 函数作用域\n在函数内部定义的变量，外部无法访问。\n```javascript\nfunction test(){\n    var a = 4;\n    return a+1\n}\nconsole.log(test());// 5\nconsole.log(a);// a is not defined \n```\n\n将函数内部定义的变量传递到函数外部的方法：\n1. 通过 return 的方式，将变量传递出去。\n2. 通过闭包的方式。\n### 3. 块级作用域\n```javascript\nfunction test(){\n    var a = 4;\n    if (a===4){\n        let b = 5\n    }\n    console.log(b)// error\n    return a+1\n}\ntest()\n```\n### 4. 动态作用域\n```javascript\nthis 是动态指向的，它的作用域就是动态的。\nwindow.a = 3\nfunction test(){\n    console.log(this.a)\n}\n// 让函数动态的绑定到一个对象上面去。这个时候的 this 指向这个对象的本身。\ntest() // 3\ntest.bind( {a : 100 } )( ) // 100\n```\n\n\n### 5.let\nlet 定义变量的特点：\n\n1. let 定义的变量具有全局作用域。\n\n2. let 定义的变量不能挂载到全局对象 window 上面。\n\n3. let 不能重复定义一个变量。\n\n4. let 定义的变量不会进行变量的提升。\n\n  ```javascript\n  {\n   let a = 4\n   console.log(a) // 4\n  }\n  console.log(a) //error\n  var b = 5\n  let c = 6\n  console.log(window.a, window.b) // 5, undefined\n  ```\n\n  \n\n### 6.const\n\nconst 定义变量的特点：\n\n1. const 定义的基础类型变量是常量，声明之后不可以更改。定义的引用类型的变量，可以修改其属性。\n\n2. const 不允许先声明，后定义。\n\n   ```javascript\n   const a \n   a = 1 \n   ```\n\n   先定义 `a`  再去声明 `a` 会报错。`//error`\n\n### 7.习题\n7.1 习题一\n请问下面的代码输出是什么？如何能根据 i 的顺序输出？\n\n```javascript\nfor (var i = 0; i < 3; i++) {\n setTimeout(function () {\n     console.log(i);\n },1000)\n console.log(i);\n}\n```\n\n输出顺序：0 1 2 3 3 3\n此处涉及两个知识点：\n\n1. 同步和异步的执行顺序。\n\n2. var 的作用域\n\n\n\n在这里 `setTimeout()` 是一个异步调用的函数，所以它会最后输出，哪怕它的第二个参数是 0 ，在上述代码中，它也是最后输出 。\n\n因为是异步的输出方式，所以实际上相当在开始输出的时候所有的 `i` 都是以 `var  i = 3;`输出。\n解决办法：将 `var` 改成 `let` 即可实现根据 `i `的顺序进行输出。\n7.2 习题二\n请问下面的代码会发生什么？\n\n```javascript\nconsole.log(a); \nlet a=1\n```\n\n此处会报错 `Cannot access 'a' before initialization`","source":"_posts/2020-8-27-JS-scope.md","raw":"\n---\ntitle: ES6. Scope\ntags: ES6\ndate: 2020-08-22 \ncategories: \n- web前端\n---\n\n\n### 1. 全局作用域\n\n在 `JS` 里定义一个全局变量\n<!-- more -->\n```javascript\nvar a =12;\n```\n\n定义变量的另外一种方式：\n\n```javascript\nb = 1234;\n```\n虽然这个和上面的表达式都具有全局作用域。严格来说，这个表达式不可以被称之为全局变量。变量 `a` 是作为全局变量使用，`b` 是作为全局对象 `window` 的属性来使用的。定义的变量是不可以通过`delete`被删除的，而属性是可以被`delete`删除的。\n\n```javascript\ndelete a; // false\ndelete b;// true\n在函数内部定义的变量，没有使用 var 定义的话，是全局变量。挂载到 window 上面\nfunction fn(){\n    ab = 100;\n}\nfn()\n```\n### 2. 函数作用域\n在函数内部定义的变量，外部无法访问。\n```javascript\nfunction test(){\n    var a = 4;\n    return a+1\n}\nconsole.log(test());// 5\nconsole.log(a);// a is not defined \n```\n\n将函数内部定义的变量传递到函数外部的方法：\n1. 通过 return 的方式，将变量传递出去。\n2. 通过闭包的方式。\n### 3. 块级作用域\n```javascript\nfunction test(){\n    var a = 4;\n    if (a===4){\n        let b = 5\n    }\n    console.log(b)// error\n    return a+1\n}\ntest()\n```\n### 4. 动态作用域\n```javascript\nthis 是动态指向的，它的作用域就是动态的。\nwindow.a = 3\nfunction test(){\n    console.log(this.a)\n}\n// 让函数动态的绑定到一个对象上面去。这个时候的 this 指向这个对象的本身。\ntest() // 3\ntest.bind( {a : 100 } )( ) // 100\n```\n\n\n### 5.let\nlet 定义变量的特点：\n\n1. let 定义的变量具有全局作用域。\n\n2. let 定义的变量不能挂载到全局对象 window 上面。\n\n3. let 不能重复定义一个变量。\n\n4. let 定义的变量不会进行变量的提升。\n\n  ```javascript\n  {\n   let a = 4\n   console.log(a) // 4\n  }\n  console.log(a) //error\n  var b = 5\n  let c = 6\n  console.log(window.a, window.b) // 5, undefined\n  ```\n\n  \n\n### 6.const\n\nconst 定义变量的特点：\n\n1. const 定义的基础类型变量是常量，声明之后不可以更改。定义的引用类型的变量，可以修改其属性。\n\n2. const 不允许先声明，后定义。\n\n   ```javascript\n   const a \n   a = 1 \n   ```\n\n   先定义 `a`  再去声明 `a` 会报错。`//error`\n\n### 7.习题\n7.1 习题一\n请问下面的代码输出是什么？如何能根据 i 的顺序输出？\n\n```javascript\nfor (var i = 0; i < 3; i++) {\n setTimeout(function () {\n     console.log(i);\n },1000)\n console.log(i);\n}\n```\n\n输出顺序：0 1 2 3 3 3\n此处涉及两个知识点：\n\n1. 同步和异步的执行顺序。\n\n2. var 的作用域\n\n\n\n在这里 `setTimeout()` 是一个异步调用的函数，所以它会最后输出，哪怕它的第二个参数是 0 ，在上述代码中，它也是最后输出 。\n\n因为是异步的输出方式，所以实际上相当在开始输出的时候所有的 `i` 都是以 `var  i = 3;`输出。\n解决办法：将 `var` 改成 `let` 即可实现根据 `i `的顺序进行输出。\n7.2 习题二\n请问下面的代码会发生什么？\n\n```javascript\nconsole.log(a); \nlet a=1\n```\n\n此处会报错 `Cannot access 'a' before initialization`","slug":"2020-8-27-JS-scope","published":1,"updated":"2020-08-29T13:11:17.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckegby71i0009qovffzli179y","content":"<h3 id=\"1-全局作用域\"><a href=\"#1-全局作用域\" class=\"headerlink\" title=\"1. 全局作用域\"></a>1. 全局作用域</h3><p>在 <code>JS</code> 里定义一个全局变量</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"number\">12</span>;</span><br></pre></td></tr></table></figure>\n\n<p>定义变量的另外一种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">1234</span>;</span><br></pre></td></tr></table></figure>\n<p>虽然这个和上面的表达式都具有全局作用域。严格来说，这个表达式不可以被称之为全局变量。变量 <code>a</code> 是作为全局变量使用，<code>b</code> 是作为全局对象 <code>window</code> 的属性来使用的。定义的变量是不可以通过<code>delete</code>被删除的，而属性是可以被<code>delete</code>删除的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> a; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> b;<span class=\"comment\">// true</span></span><br><span class=\"line\">在函数内部定义的变量，没有使用 <span class=\"keyword\">var</span> 定义的话，是全局变量。挂载到 <span class=\"built_in\">window</span> 上面</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ab = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-函数作用域\"><a href=\"#2-函数作用域\" class=\"headerlink\" title=\"2. 函数作用域\"></a>2. 函数作用域</h3><p>在函数内部定义的变量，外部无法访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test());<span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">// a is not defined </span></span><br></pre></td></tr></table></figure>\n\n<p>将函数内部定义的变量传递到函数外部的方法：</p>\n<ol>\n<li>通过 return 的方式，将变量传递出去。</li>\n<li>通过闭包的方式。<h3 id=\"3-块级作用域\"><a href=\"#3-块级作用域\" class=\"headerlink\" title=\"3. 块级作用域\"></a>3. 块级作用域</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a===<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b)<span class=\"comment\">// error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-动态作用域\"><a href=\"#4-动态作用域\" class=\"headerlink\" title=\"4. 动态作用域\"></a>4. 动态作用域</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span> 是动态指向的，它的作用域就是动态的。</span><br><span class=\"line\"><span class=\"built_in\">window</span>.a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 让函数动态的绑定到一个对象上面去。这个时候的 this 指向这个对象的本身。</span></span><br><span class=\"line\">test() <span class=\"comment\">// 3</span></span><br><span class=\"line\">test.bind( &#123;<span class=\"attr\">a</span> : <span class=\"number\">100</span> &#125; )( ) <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h3 id=\"5-let\"><a href=\"#5-let\" class=\"headerlink\" title=\"5.let\"></a>5.let</h3><p>let 定义变量的特点：</p>\n<ol>\n<li><p>let 定义的变量具有全局作用域。</p>\n</li>\n<li><p>let 定义的变量不能挂载到全局对象 window 上面。</p>\n</li>\n<li><p>let 不能重复定义一个变量。</p>\n</li>\n<li><p>let 定义的变量不会进行变量的提升。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> a = <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a, <span class=\"built_in\">window</span>.b) <span class=\"comment\">// 5, undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"6-const\"><a href=\"#6-const\" class=\"headerlink\" title=\"6.const\"></a>6.const</h3><p>const 定义变量的特点：</p>\n<ol>\n<li><p>const 定义的基础类型变量是常量，声明之后不可以更改。定义的引用类型的变量，可以修改其属性。</p>\n</li>\n<li><p>const 不允许先声明，后定义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a </span><br><span class=\"line\">a = <span class=\"number\">1</span> </span><br></pre></td></tr></table></figure>\n\n<p>先定义 <code>a</code>  再去声明 <code>a</code> 会报错。<code>//error</code></p>\n</li>\n</ol>\n<h3 id=\"7-习题\"><a href=\"#7-习题\" class=\"headerlink\" title=\"7.习题\"></a>7.习题</h3><p>7.1 习题一<br>请问下面的代码输出是什么？如何能根据 i 的顺序输出？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"> &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出顺序：0 1 2 3 3 3<br>此处涉及两个知识点：</p>\n<ol>\n<li><p>同步和异步的执行顺序。</p>\n</li>\n<li><p>var 的作用域</p>\n</li>\n</ol>\n<p>在这里 <code>setTimeout()</code> 是一个异步调用的函数，所以它会最后输出，哪怕它的第二个参数是 0 ，在上述代码中，它也是最后输出 。</p>\n<p>因为是异步的输出方式，所以实际上相当在开始输出的时候所有的 <code>i</code> 都是以 <code>var  i = 3;</code>输出。<br>解决办法：将 <code>var</code> 改成 <code>let</code> 即可实现根据 <code>i </code>的顺序进行输出。<br>7.2 习题二<br>请问下面的代码会发生什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a); </span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>此处会报错 <code>Cannot access &#39;a&#39; before initialization</code></p>\n","site":{"data":{}},"length":1466,"excerpt":"<h3 id=\"1-全局作用域\"><a href=\"#1-全局作用域\" class=\"headerlink\" title=\"1. 全局作用域\"></a>1. 全局作用域</h3><p>在 <code>JS</code> 里定义一个全局变量</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"number\">12</span>;</span><br></pre></td></tr></table></figure>\n\n<p>定义变量的另外一种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">1234</span>;</span><br></pre></td></tr></table></figure>\n<p>虽然这个和上面的表达式都具有全局作用域。严格来说，这个表达式不可以被称之为全局变量。变量 <code>a</code> 是作为全局变量使用，<code>b</code> 是作为全局对象 <code>window</code> 的属性来使用的。定义的变量是不可以通过<code>delete</code>被删除的，而属性是可以被<code>delete</code>删除的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> a; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> b;<span class=\"comment\">// true</span></span><br><span class=\"line\">在函数内部定义的变量，没有使用 <span class=\"keyword\">var</span> 定义的话，是全局变量。挂载到 <span class=\"built_in\">window</span> 上面</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ab = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-函数作用域\"><a href=\"#2-函数作用域\" class=\"headerlink\" title=\"2. 函数作用域\"></a>2. 函数作用域</h3><p>在函数内部定义的变量，外部无法访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test());<span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">// a is not defined </span></span><br></pre></td></tr></table></figure>\n\n<p>将函数内部定义的变量传递到函数外部的方法：</p>\n<ol>\n<li>通过 return 的方式，将变量传递出去。</li>\n<li>通过闭包的方式。<h3 id=\"3-块级作用域\"><a href=\"#3-块级作用域\" class=\"headerlink\" title=\"3. 块级作用域\"></a>3. 块级作用域</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a===<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b)<span class=\"comment\">// error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-动态作用域\"><a href=\"#4-动态作用域\" class=\"headerlink\" title=\"4. 动态作用域\"></a>4. 动态作用域</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span> 是动态指向的，它的作用域就是动态的。</span><br><span class=\"line\"><span class=\"built_in\">window</span>.a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 让函数动态的绑定到一个对象上面去。这个时候的 this 指向这个对象的本身。</span></span><br><span class=\"line\">test() <span class=\"comment\">// 3</span></span><br><span class=\"line\">test.bind( &#123;<span class=\"attr\">a</span> : <span class=\"number\">100</span> &#125; )( ) <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h3 id=\"5-let\"><a href=\"#5-let\" class=\"headerlink\" title=\"5.let\"></a>5.let</h3><p>let 定义变量的特点：</p>\n<ol>\n<li><p>let 定义的变量具有全局作用域。</p>\n</li>\n<li><p>let 定义的变量不能挂载到全局对象 window 上面。</p>\n</li>\n<li><p>let 不能重复定义一个变量。</p>\n</li>\n<li><p>let 定义的变量不会进行变量的提升。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> a = <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a, <span class=\"built_in\">window</span>.b) <span class=\"comment\">// 5, undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"6-const\"><a href=\"#6-const\" class=\"headerlink\" title=\"6.const\"></a>6.const</h3><p>const 定义变量的特点：</p>\n<ol>\n<li><p>const 定义的基础类型变量是常量，声明之后不可以更改。定义的引用类型的变量，可以修改其属性。</p>\n</li>\n<li><p>const 不允许先声明，后定义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a </span><br><span class=\"line\">a = <span class=\"number\">1</span> </span><br></pre></td></tr></table></figure>\n\n<p>先定义 <code>a</code>  再去声明 <code>a</code> 会报错。<code>//error</code></p>\n</li>\n</ol>\n<h3 id=\"7-习题\"><a href=\"#7-习题\" class=\"headerlink\" title=\"7.习题\"></a>7.习题</h3><p>7.1 习题一<br>请问下面的代码输出是什么？如何能根据 i 的顺序输出？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"> &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出顺序：0 1 2 3 3 3<br>此处涉及两个知识点：</p>\n<ol>\n<li><p>同步和异步的执行顺序。</p>\n</li>\n<li><p>var 的作用域</p>\n</li>\n</ol>\n<p>在这里 <code>setTimeout()</code> 是一个异步调用的函数，所以它会最后输出，哪怕它的第二个参数是 0 ，在上述代码中，它也是最后输出 。</p>\n<p>因为是异步的输出方式，所以实际上相当在开始输出的时候所有的 <code>i</code> 都是以 <code>var  i = 3;</code>输出。<br>解决办法：将 <code>var</code> 改成 <code>let</code> 即可实现根据 <code>i </code>的顺序进行输出。<br>7.2 习题二<br>请问下面的代码会发生什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a); </span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>此处会报错 <code>Cannot access &#39;a&#39; before initialization</code></p>"},{"title":"KOA 基础","date":"2020-08-18T16:00:00.000Z","_content":"\n\n#### 一：KOA简介\nKOA 的特点:\n1. 洋葱模型\n<!-- more -->\n\n2. 精简（定制化的能力很强，KOA 需要二次开发。）\n\n#### 二：初始化项目\n1. 初始化项目，在根目录输入命令： `npm init`\n2. 安装 KOA：`npm i koa`\n\n#### 三：导入导出的方式\n1. commonJS \n2. ES6\n3. AMD\n\nnodeJS 里不能直接使用 ES6 的导入与导出，因为 ES6 在 NodeJS 里面还是实验特性。NodeJs 也不支持直接在类上面定义属性。\n```javascript\nclass test{\n  // node 不支持直接在类里面直接定义属性\n  x = 1\n  constructor(){\n    // 只能通过构造器的方式定义属性\n    this.x = 1  \n  }\n}\n```\n假入我们需要使用这些 ES6 的新特性的话，可以通过 babel 在 Node 里实现 ES 的新的特性。但是配置起来很复杂。\n\n#### 四：使用 KOA\n1. 导入 KOA\n```javascript\nconst koa = require('koa');\n```\n2. 实例化 KOA\n```javascript\nconst app = new Koa()\n```\n\n3.中间件\n中间件就是函数，定义一个中间件就是定义一个函数。定义一个中间件之后要注册到函数上面。使用中间件：\n示例代码：\n```javascript\nconst Koa = require('koa')\nconst app = new Koa()\n\nfunction test(){\n  console.log('test1')\n}\n\napp.use(test)\napp.listen(3222)\n```\n\n当我们定义了两个中间件之后，KOA 只会默认执行第一个中间件。在 app.use() 里面传入的函数里面有两个参数，第一个参数的 ctx 是上下文的意思，第二个参数 next 的指的是下一个 KOA 中间件.当我们在中间件函数里面调用了 next() 之后，KOA 就会继续调用下一个中间件函数。\n\n```javascript\napp.use((ctx,next)=>{\n  console.log('test2')\n  next()\n})\n\napp.use((ctx,next)=>{\n  console.log('test3')\n})\n\n```\n\n4. 洋葱模型\n如果不强制加上 async 和 await 的话，我们难以保证代码是按照洋葱模型的顺序执行的。\n\n\n```javascript\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use( async (ctx,next)=>{\n  console.log(1)\n  await next()\n  console.log(2)\n})\n\napp.use( async (ctx,next)=>{\n  console.log(3)\n  await next()\n  console.log(4)\n})\n\napp.listen(3222)\n\n// 输出顺序是：1 3 4 2 \n```\n\n\n\n5. 深入理解 async 和 await \n\n\n\n思考： next() 返回的结果是什么？\n\n\n```javascript\nconst a = next()\n// next() 的返回结果是一个 Promise\n  console.log(a) // Promise { undefined }\n```\n\nPromise 对象的值是 undefined 的原因是因为下一个中间件没有返回任何值。当下一个中间件有返回值的话，Promise的内容就是该中间件返回的值。\n\n```javascript\napp.use(  (ctx,next)=>{\n  console.log(1)\n  const a = next() //Promise { 'hello Promise' }\n  console.log(a)\n  console.log(2)\n})\n\napp.use((ctx,next)=>{\n  console.log(3)\n   next()\n  console.log(4)\n  return 'hello Promise'\n})\n```\n\n当需要获取 Promise 返回的内容时，使用 Promise.then() 方法。若获取 Promise { 'abc' } 里面的 'abc' 则使用 Promise.then() 获取，\n\n```javascript\n// Promise.then()的使用方法。\na.then((res)=>{\nconsole.log(res) \n})\n```\n\n每一次都使用 Promise.then() 方法有点麻烦，有没有另一种方法获取异步返回的结果呢？这时我们使用异步的终极解决方案 async await。\n```javascript\napp.use( async (ctx,next)=>{\n  const a = await next()\n  console.log(a)\n})\n```\n\n#### 五：理解 async 和 await\n\n await 可以看作是求值关键字。await 有等待的意思，其会阻塞线程。await 是不是只能对 Promise 进行求值呢？不是的。await 可以对表达式进行求值，不仅仅只能对 Promise 进行求值。只不过大多数情况下我们只是对 Promise 进行求值的。\n\n```javascript\nconst sum = async ()=>{\n  const num = await 100*100;\n  console.log(num)\n}\n// IDE 会提示使用 await 多余。\nsum() // 10000\n```\n\nawait 会阻塞线程。\n什么样子的代码是异步的呢？\n1. 对资源的操作一般都是异步的（读文件）\n2. 发送 http 请求\n3. 操作数据库\n\n下面用两段代码来演示 await 阻塞线程\n```javascript\napp.use((ctx,next)=>{\n  const axios = require('axios')\n  const start = Date.now()\n  const res = axios.get('https://www.imooc.com/t/4294850')\n  const end = Date.now()\n  console.log(end-start) // 0\n})\n```\n可以看到，在不使用 async 和 await 的情况下，http 请求的时间几乎为 0 \n\n```javascript\napp.use(async (ctx,next)=>{\n  const axios = require('axios')\n  const start = Date.now()\n  const res = await axios.get('https://www.imooc.com/t/4294850')\n  const end = Date.now()\n  console.log(end-start) // 756\n})\n```\n\n而在使用 await 的 async 的情况下，却发送了阻塞。\n\n阻塞线程不是会运行卡断，线程被阻塞了，不是说就不运行代码了，而是去运行其他的代码了。\n\nasync 的意义，在一个函数的前面加上 async 的时候，这个函数在任何时候的返回值都会被包装成一个 Promise.\n```javascript\nasync function f() {\n  return 'hello'\n}\n\nconsole.log(f()) // Promise { 'hello' }\n\n```\n\n只有在中间件上面加上 async 和 await 才能保证洋葱模型\n\n如果不加上async await的代码：\n```javascript\napp.use((ctx,next)=>{\n  console.log(1)\n  next()\n  console.log(2)\n})\napp.use(async (ctx,next)=>{\n  console.log(3)\n  const axios = require('axios')\n  const res = await axios.get('https://www.imooc.com/t/4294850')\n  next()\n  console.log(4)\n})\n// 1 3 2 4\n```\n加上之后\n```javascript\napp.use(async (ctx,next)=>{\n  console.log(1)\n  await next()\n  console.log(2)\n})\n\napp.use(async (ctx,next)=>{\n  console.log(3)\n  const axios = require('axios')\n  const res = await axios.get('https://www.imooc.com/t/4294850')\n  next()\n  console.log(4)\n})\n\n// 1 3 4 2\n```\n\n洋葱模型的作用：比如我们写了很多个中间件，需要在第一个中间件里面写一个函数，需要等到其他的中间件全部运行完了之后才运行（比如计时），那么我们就必须要让中间件按照洋葱模型来运行才可以正常完成这个功能。\n\n还比如获取 ctx 上面的内容需要用到洋葱模型。\n```javascript\napp.use(async (ctx,next)=>{\n  await next()\n  const r = ctx.x\n  console.log(r)\n})\n\napp.use(async (ctx,next)=>{\n  const axios = require('axios')\n  const res = await axios.get('https://www.imooc.com/t/4294850')\n  next()\n  ctx.x = res\n})\n```\n","source":"_posts/2020-8-19-KOA-base.md","raw":"---\ntitle: KOA 基础\ntags: NodeJS\ndate: 2020-08-19 \n---\n\n\n#### 一：KOA简介\nKOA 的特点:\n1. 洋葱模型\n<!-- more -->\n\n2. 精简（定制化的能力很强，KOA 需要二次开发。）\n\n#### 二：初始化项目\n1. 初始化项目，在根目录输入命令： `npm init`\n2. 安装 KOA：`npm i koa`\n\n#### 三：导入导出的方式\n1. commonJS \n2. ES6\n3. AMD\n\nnodeJS 里不能直接使用 ES6 的导入与导出，因为 ES6 在 NodeJS 里面还是实验特性。NodeJs 也不支持直接在类上面定义属性。\n```javascript\nclass test{\n  // node 不支持直接在类里面直接定义属性\n  x = 1\n  constructor(){\n    // 只能通过构造器的方式定义属性\n    this.x = 1  \n  }\n}\n```\n假入我们需要使用这些 ES6 的新特性的话，可以通过 babel 在 Node 里实现 ES 的新的特性。但是配置起来很复杂。\n\n#### 四：使用 KOA\n1. 导入 KOA\n```javascript\nconst koa = require('koa');\n```\n2. 实例化 KOA\n```javascript\nconst app = new Koa()\n```\n\n3.中间件\n中间件就是函数，定义一个中间件就是定义一个函数。定义一个中间件之后要注册到函数上面。使用中间件：\n示例代码：\n```javascript\nconst Koa = require('koa')\nconst app = new Koa()\n\nfunction test(){\n  console.log('test1')\n}\n\napp.use(test)\napp.listen(3222)\n```\n\n当我们定义了两个中间件之后，KOA 只会默认执行第一个中间件。在 app.use() 里面传入的函数里面有两个参数，第一个参数的 ctx 是上下文的意思，第二个参数 next 的指的是下一个 KOA 中间件.当我们在中间件函数里面调用了 next() 之后，KOA 就会继续调用下一个中间件函数。\n\n```javascript\napp.use((ctx,next)=>{\n  console.log('test2')\n  next()\n})\n\napp.use((ctx,next)=>{\n  console.log('test3')\n})\n\n```\n\n4. 洋葱模型\n如果不强制加上 async 和 await 的话，我们难以保证代码是按照洋葱模型的顺序执行的。\n\n\n```javascript\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use( async (ctx,next)=>{\n  console.log(1)\n  await next()\n  console.log(2)\n})\n\napp.use( async (ctx,next)=>{\n  console.log(3)\n  await next()\n  console.log(4)\n})\n\napp.listen(3222)\n\n// 输出顺序是：1 3 4 2 \n```\n\n\n\n5. 深入理解 async 和 await \n\n\n\n思考： next() 返回的结果是什么？\n\n\n```javascript\nconst a = next()\n// next() 的返回结果是一个 Promise\n  console.log(a) // Promise { undefined }\n```\n\nPromise 对象的值是 undefined 的原因是因为下一个中间件没有返回任何值。当下一个中间件有返回值的话，Promise的内容就是该中间件返回的值。\n\n```javascript\napp.use(  (ctx,next)=>{\n  console.log(1)\n  const a = next() //Promise { 'hello Promise' }\n  console.log(a)\n  console.log(2)\n})\n\napp.use((ctx,next)=>{\n  console.log(3)\n   next()\n  console.log(4)\n  return 'hello Promise'\n})\n```\n\n当需要获取 Promise 返回的内容时，使用 Promise.then() 方法。若获取 Promise { 'abc' } 里面的 'abc' 则使用 Promise.then() 获取，\n\n```javascript\n// Promise.then()的使用方法。\na.then((res)=>{\nconsole.log(res) \n})\n```\n\n每一次都使用 Promise.then() 方法有点麻烦，有没有另一种方法获取异步返回的结果呢？这时我们使用异步的终极解决方案 async await。\n```javascript\napp.use( async (ctx,next)=>{\n  const a = await next()\n  console.log(a)\n})\n```\n\n#### 五：理解 async 和 await\n\n await 可以看作是求值关键字。await 有等待的意思，其会阻塞线程。await 是不是只能对 Promise 进行求值呢？不是的。await 可以对表达式进行求值，不仅仅只能对 Promise 进行求值。只不过大多数情况下我们只是对 Promise 进行求值的。\n\n```javascript\nconst sum = async ()=>{\n  const num = await 100*100;\n  console.log(num)\n}\n// IDE 会提示使用 await 多余。\nsum() // 10000\n```\n\nawait 会阻塞线程。\n什么样子的代码是异步的呢？\n1. 对资源的操作一般都是异步的（读文件）\n2. 发送 http 请求\n3. 操作数据库\n\n下面用两段代码来演示 await 阻塞线程\n```javascript\napp.use((ctx,next)=>{\n  const axios = require('axios')\n  const start = Date.now()\n  const res = axios.get('https://www.imooc.com/t/4294850')\n  const end = Date.now()\n  console.log(end-start) // 0\n})\n```\n可以看到，在不使用 async 和 await 的情况下，http 请求的时间几乎为 0 \n\n```javascript\napp.use(async (ctx,next)=>{\n  const axios = require('axios')\n  const start = Date.now()\n  const res = await axios.get('https://www.imooc.com/t/4294850')\n  const end = Date.now()\n  console.log(end-start) // 756\n})\n```\n\n而在使用 await 的 async 的情况下，却发送了阻塞。\n\n阻塞线程不是会运行卡断，线程被阻塞了，不是说就不运行代码了，而是去运行其他的代码了。\n\nasync 的意义，在一个函数的前面加上 async 的时候，这个函数在任何时候的返回值都会被包装成一个 Promise.\n```javascript\nasync function f() {\n  return 'hello'\n}\n\nconsole.log(f()) // Promise { 'hello' }\n\n```\n\n只有在中间件上面加上 async 和 await 才能保证洋葱模型\n\n如果不加上async await的代码：\n```javascript\napp.use((ctx,next)=>{\n  console.log(1)\n  next()\n  console.log(2)\n})\napp.use(async (ctx,next)=>{\n  console.log(3)\n  const axios = require('axios')\n  const res = await axios.get('https://www.imooc.com/t/4294850')\n  next()\n  console.log(4)\n})\n// 1 3 2 4\n```\n加上之后\n```javascript\napp.use(async (ctx,next)=>{\n  console.log(1)\n  await next()\n  console.log(2)\n})\n\napp.use(async (ctx,next)=>{\n  console.log(3)\n  const axios = require('axios')\n  const res = await axios.get('https://www.imooc.com/t/4294850')\n  next()\n  console.log(4)\n})\n\n// 1 3 4 2\n```\n\n洋葱模型的作用：比如我们写了很多个中间件，需要在第一个中间件里面写一个函数，需要等到其他的中间件全部运行完了之后才运行（比如计时），那么我们就必须要让中间件按照洋葱模型来运行才可以正常完成这个功能。\n\n还比如获取 ctx 上面的内容需要用到洋葱模型。\n```javascript\napp.use(async (ctx,next)=>{\n  await next()\n  const r = ctx.x\n  console.log(r)\n})\n\napp.use(async (ctx,next)=>{\n  const axios = require('axios')\n  const res = await axios.get('https://www.imooc.com/t/4294850')\n  next()\n  ctx.x = res\n})\n```\n","slug":"2020-8-19-KOA-base","published":1,"updated":"2020-08-29T13:11:25.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckegby71m000bqovf9uskaepu","content":"<h4 id=\"一：KOA简介\"><a href=\"#一：KOA简介\" class=\"headerlink\" title=\"一：KOA简介\"></a>一：KOA简介</h4><p>KOA 的特点:</p>\n<ol>\n<li><p>洋葱模型</p>\n<a id=\"more\"></a>\n</li>\n<li><p>精简（定制化的能力很强，KOA 需要二次开发。）</p>\n</li>\n</ol>\n<h4 id=\"二：初始化项目\"><a href=\"#二：初始化项目\" class=\"headerlink\" title=\"二：初始化项目\"></a>二：初始化项目</h4><ol>\n<li>初始化项目，在根目录输入命令： <code>npm init</code></li>\n<li>安装 KOA：<code>npm i koa</code></li>\n</ol>\n<h4 id=\"三：导入导出的方式\"><a href=\"#三：导入导出的方式\" class=\"headerlink\" title=\"三：导入导出的方式\"></a>三：导入导出的方式</h4><ol>\n<li>commonJS </li>\n<li>ES6</li>\n<li>AMD</li>\n</ol>\n<p>nodeJS 里不能直接使用 ES6 的导入与导出，因为 ES6 在 NodeJS 里面还是实验特性。NodeJs 也不支持直接在类上面定义属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// node 不支持直接在类里面直接定义属性</span></span><br><span class=\"line\">  x = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只能通过构造器的方式定义属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = <span class=\"number\">1</span>  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假入我们需要使用这些 ES6 的新特性的话，可以通过 babel 在 Node 里实现 ES 的新的特性。但是配置起来很复杂。</p>\n<h4 id=\"四：使用-KOA\"><a href=\"#四：使用-KOA\" class=\"headerlink\" title=\"四：使用 KOA\"></a>四：使用 KOA</h4><ol>\n<li>导入 KOA<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li>实例化 KOA<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>3.中间件<br>中间件就是函数，定义一个中间件就是定义一个函数。定义一个中间件之后要注册到函数上面。使用中间件：<br>示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test1&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(test)</span><br><span class=\"line\">app.listen(<span class=\"number\">3222</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当我们定义了两个中间件之后，KOA 只会默认执行第一个中间件。在 app.use() 里面传入的函数里面有两个参数，第一个参数的 ctx 是上下文的意思，第二个参数 next 的指的是下一个 KOA 中间件.当我们在中间件函数里面调用了 next() 之后，KOA 就会继续调用下一个中间件函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test2&#x27;</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test3&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>洋葱模型<br>如果不强制加上 async 和 await 的话，我们难以保证代码是按照洋葱模型的顺序执行的。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use( <span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use( <span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3222</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出顺序是：1 3 4 2 </span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"5\">\n<li>深入理解 async 和 await </li>\n</ol>\n<p>思考： next() 返回的结果是什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = next()</span><br><span class=\"line\"><span class=\"comment\">// next() 的返回结果是一个 Promise</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// Promise &#123; undefined &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Promise 对象的值是 undefined 的原因是因为下一个中间件没有返回任何值。当下一个中间件有返回值的话，Promise的内容就是该中间件返回的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(  <span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = next() <span class=\"comment\">//Promise &#123; &#x27;hello Promise&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">   next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello Promise&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当需要获取 Promise 返回的内容时，使用 Promise.then() 方法。若获取 Promise { ‘abc’ } 里面的 ‘abc’ 则使用 Promise.then() 获取，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Promise.then()的使用方法。</span></span><br><span class=\"line\">a.then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>每一次都使用 Promise.then() 方法有点麻烦，有没有另一种方法获取异步返回的结果呢？这时我们使用异步的终极解决方案 async await。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use( <span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五：理解-async-和-await\"><a href=\"#五：理解-async-和-await\" class=\"headerlink\" title=\"五：理解 async 和 await\"></a>五：理解 async 和 await</h4><p> await 可以看作是求值关键字。await 有等待的意思，其会阻塞线程。await 是不是只能对 Promise 进行求值呢？不是的。await 可以对表达式进行求值，不仅仅只能对 Promise 进行求值。只不过大多数情况下我们只是对 Promise 进行求值的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num = <span class=\"keyword\">await</span> <span class=\"number\">100</span>*<span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// IDE 会提示使用 await 多余。</span></span><br><span class=\"line\">sum() <span class=\"comment\">// 10000</span></span><br></pre></td></tr></table></figure>\n\n<p>await 会阻塞线程。<br>什么样子的代码是异步的呢？</p>\n<ol>\n<li>对资源的操作一般都是异步的（读文件）</li>\n<li>发送 http 请求</li>\n<li>操作数据库</li>\n</ol>\n<p>下面用两段代码来演示 await 阻塞线程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> end = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(end-start) <span class=\"comment\">// 0</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>可以看到，在不使用 async 和 await 的情况下，http 请求的时间几乎为 0 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> end = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(end-start) <span class=\"comment\">// 756</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>而在使用 await 的 async 的情况下，却发送了阻塞。</p>\n<p>阻塞线程不是会运行卡断，线程被阻塞了，不是说就不运行代码了，而是去运行其他的代码了。</p>\n<p>async 的意义，在一个函数的前面加上 async 的时候，这个函数在任何时候的返回值都会被包装成一个 Promise.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f()) <span class=\"comment\">// Promise &#123; &#x27;hello&#x27; &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>只有在中间件上面加上 async 和 await 才能保证洋葱模型</p>\n<p>如果不加上async await的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1 3 2 4</span></span><br></pre></td></tr></table></figure>\n<p>加上之后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 3 4 2</span></span><br></pre></td></tr></table></figure>\n\n<p>洋葱模型的作用：比如我们写了很多个中间件，需要在第一个中间件里面写一个函数，需要等到其他的中间件全部运行完了之后才运行（比如计时），那么我们就必须要让中间件按照洋葱模型来运行才可以正常完成这个功能。</p>\n<p>还比如获取 ctx 上面的内容需要用到洋葱模型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = ctx.x</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(r)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">  ctx.x = res</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":3955,"excerpt":"<h4 id=\"一：KOA简介\"><a href=\"#一：KOA简介\" class=\"headerlink\" title=\"一：KOA简介\"></a>一：KOA简介</h4><p>KOA 的特点:</p>\n<ol>\n<li><p>洋葱模型</p>","more":"</li>\n<li><p>精简（定制化的能力很强，KOA 需要二次开发。）</p>\n</li>\n</ol>\n<h4 id=\"二：初始化项目\"><a href=\"#二：初始化项目\" class=\"headerlink\" title=\"二：初始化项目\"></a>二：初始化项目</h4><ol>\n<li>初始化项目，在根目录输入命令： <code>npm init</code></li>\n<li>安装 KOA：<code>npm i koa</code></li>\n</ol>\n<h4 id=\"三：导入导出的方式\"><a href=\"#三：导入导出的方式\" class=\"headerlink\" title=\"三：导入导出的方式\"></a>三：导入导出的方式</h4><ol>\n<li>commonJS </li>\n<li>ES6</li>\n<li>AMD</li>\n</ol>\n<p>nodeJS 里不能直接使用 ES6 的导入与导出，因为 ES6 在 NodeJS 里面还是实验特性。NodeJs 也不支持直接在类上面定义属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// node 不支持直接在类里面直接定义属性</span></span><br><span class=\"line\">  x = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只能通过构造器的方式定义属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = <span class=\"number\">1</span>  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假入我们需要使用这些 ES6 的新特性的话，可以通过 babel 在 Node 里实现 ES 的新的特性。但是配置起来很复杂。</p>\n<h4 id=\"四：使用-KOA\"><a href=\"#四：使用-KOA\" class=\"headerlink\" title=\"四：使用 KOA\"></a>四：使用 KOA</h4><ol>\n<li>导入 KOA<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li>实例化 KOA<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>3.中间件<br>中间件就是函数，定义一个中间件就是定义一个函数。定义一个中间件之后要注册到函数上面。使用中间件：<br>示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test1&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(test)</span><br><span class=\"line\">app.listen(<span class=\"number\">3222</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当我们定义了两个中间件之后，KOA 只会默认执行第一个中间件。在 app.use() 里面传入的函数里面有两个参数，第一个参数的 ctx 是上下文的意思，第二个参数 next 的指的是下一个 KOA 中间件.当我们在中间件函数里面调用了 next() 之后，KOA 就会继续调用下一个中间件函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test2&#x27;</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test3&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>洋葱模型<br>如果不强制加上 async 和 await 的话，我们难以保证代码是按照洋葱模型的顺序执行的。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use( <span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use( <span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3222</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出顺序是：1 3 4 2 </span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"5\">\n<li>深入理解 async 和 await </li>\n</ol>\n<p>思考： next() 返回的结果是什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = next()</span><br><span class=\"line\"><span class=\"comment\">// next() 的返回结果是一个 Promise</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// Promise &#123; undefined &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Promise 对象的值是 undefined 的原因是因为下一个中间件没有返回任何值。当下一个中间件有返回值的话，Promise的内容就是该中间件返回的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(  <span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = next() <span class=\"comment\">//Promise &#123; &#x27;hello Promise&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">   next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello Promise&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当需要获取 Promise 返回的内容时，使用 Promise.then() 方法。若获取 Promise { ‘abc’ } 里面的 ‘abc’ 则使用 Promise.then() 获取，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Promise.then()的使用方法。</span></span><br><span class=\"line\">a.then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>每一次都使用 Promise.then() 方法有点麻烦，有没有另一种方法获取异步返回的结果呢？这时我们使用异步的终极解决方案 async await。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use( <span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五：理解-async-和-await\"><a href=\"#五：理解-async-和-await\" class=\"headerlink\" title=\"五：理解 async 和 await\"></a>五：理解 async 和 await</h4><p> await 可以看作是求值关键字。await 有等待的意思，其会阻塞线程。await 是不是只能对 Promise 进行求值呢？不是的。await 可以对表达式进行求值，不仅仅只能对 Promise 进行求值。只不过大多数情况下我们只是对 Promise 进行求值的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num = <span class=\"keyword\">await</span> <span class=\"number\">100</span>*<span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// IDE 会提示使用 await 多余。</span></span><br><span class=\"line\">sum() <span class=\"comment\">// 10000</span></span><br></pre></td></tr></table></figure>\n\n<p>await 会阻塞线程。<br>什么样子的代码是异步的呢？</p>\n<ol>\n<li>对资源的操作一般都是异步的（读文件）</li>\n<li>发送 http 请求</li>\n<li>操作数据库</li>\n</ol>\n<p>下面用两段代码来演示 await 阻塞线程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> end = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(end-start) <span class=\"comment\">// 0</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>可以看到，在不使用 async 和 await 的情况下，http 请求的时间几乎为 0 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> end = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(end-start) <span class=\"comment\">// 756</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>而在使用 await 的 async 的情况下，却发送了阻塞。</p>\n<p>阻塞线程不是会运行卡断，线程被阻塞了，不是说就不运行代码了，而是去运行其他的代码了。</p>\n<p>async 的意义，在一个函数的前面加上 async 的时候，这个函数在任何时候的返回值都会被包装成一个 Promise.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f()) <span class=\"comment\">// Promise &#123; &#x27;hello&#x27; &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>只有在中间件上面加上 async 和 await 才能保证洋葱模型</p>\n<p>如果不加上async await的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">ctx,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1 3 2 4</span></span><br></pre></td></tr></table></figure>\n<p>加上之后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 3 4 2</span></span><br></pre></td></tr></table></figure>\n\n<p>洋葱模型的作用：比如我们写了很多个中间件，需要在第一个中间件里面写一个函数，需要等到其他的中间件全部运行完了之后才运行（比如计时），那么我们就必须要让中间件按照洋葱模型来运行才可以正常完成这个功能。</p>\n<p>还比如获取 ctx 上面的内容需要用到洋葱模型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = ctx.x</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(r)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">&#x27;https://www.imooc.com/t/4294850&#x27;</span>)</span><br><span class=\"line\">  next()</span><br><span class=\"line\">  ctx.x = res</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckegby71i0009qovffzli179y","category_id":"ckegby71b0004qovfa6e888j6","_id":"ckegby71u000gqovfgsno4atd"},{"post_id":"ckegby7120001qovfencg7365","category_id":"ckegby71b0004qovfa6e888j6","_id":"ckegby71v000jqovfenneefxr"},{"post_id":"ckegby7180003qovf0ee13hrl","category_id":"ckegby71b0004qovfa6e888j6","_id":"ckegby71w000lqovfekde4az4"},{"post_id":"ckegby71f0007qovf38n44oda","category_id":"ckegby71b0004qovfa6e888j6","_id":"ckegby71y000oqovfbhv5e1h1"}],"PostTag":[{"post_id":"ckegby7120001qovfencg7365","tag_id":"ckegby71d0005qovfb3xz4mus","_id":"ckegby71s000eqovf7q466jkv"},{"post_id":"ckegby7180003qovf0ee13hrl","tag_id":"ckegby71o000dqovfhbtcd1ea","_id":"ckegby71v000kqovfdyek9h1l"},{"post_id":"ckegby71f0007qovf38n44oda","tag_id":"ckegby71d0005qovfb3xz4mus","_id":"ckegby71x000nqovf1q5h5gyk"},{"post_id":"ckegby71i0009qovffzli179y","tag_id":"ckegby71o000dqovfhbtcd1ea","_id":"ckegby71z000qqovfdbxlg44v"},{"post_id":"ckegby71m000bqovf9uskaepu","tag_id":"ckegby71y000pqovfhv97cs3n","_id":"ckegby71z000rqovfc56fhmfg"}],"Tag":[{"name":"小程序","_id":"ckegby71d0005qovfb3xz4mus"},{"name":"ES6","_id":"ckegby71o000dqovfhbtcd1ea"},{"name":"NodeJS","_id":"ckegby71y000pqovfhv97cs3n"}]}}